<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.02%)</title><rect x="0.0124%" y="117" width="0.0186%" height="15" fill="rgb(227,0,7)"/><text x="0.2624%" y="127.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.02%)</title><rect x="0.0124%" y="101" width="0.0186%" height="15" fill="rgb(217,0,24)"/><text x="0.2624%" y="111.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.02%)</title><rect x="0.0124%" y="85" width="0.0186%" height="15" fill="rgb(221,193,54)"/><text x="0.2624%" y="95.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.02%)</title><rect x="0.0124%" y="69" width="0.0186%" height="15" fill="rgb(248,212,6)"/><text x="0.2624%" y="79.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.02%)</title><rect x="0.0124%" y="53" width="0.0186%" height="15" fill="rgb(208,68,35)"/><text x="0.2624%" y="63.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.01%)</title><rect x="0.0186%" y="37" width="0.0124%" height="15" fill="rgb(232,128,0)"/><text x="0.2686%" y="47.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (4 samples, 0.02%)</title><rect x="0.0124%" y="229" width="0.0248%" height="15" fill="rgb(207,160,47)"/><text x="0.2624%" y="239.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (4 samples, 0.02%)</title><rect x="0.0124%" y="213" width="0.0248%" height="15" fill="rgb(228,23,34)"/><text x="0.2624%" y="223.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (4 samples, 0.02%)</title><rect x="0.0124%" y="197" width="0.0248%" height="15" fill="rgb(218,30,26)"/><text x="0.2624%" y="207.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (4 samples, 0.02%)</title><rect x="0.0124%" y="181" width="0.0248%" height="15" fill="rgb(220,122,19)"/><text x="0.2624%" y="191.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (4 samples, 0.02%)</title><rect x="0.0124%" y="165" width="0.0248%" height="15" fill="rgb(250,228,42)"/><text x="0.2624%" y="175.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (4 samples, 0.02%)</title><rect x="0.0124%" y="149" width="0.0248%" height="15" fill="rgb(240,193,28)"/><text x="0.2624%" y="159.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (4 samples, 0.02%)</title><rect x="0.0124%" y="133" width="0.0248%" height="15" fill="rgb(216,20,37)"/><text x="0.2624%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::uflow (3 samples, 0.02%)</title><rect x="0.0805%" y="213" width="0.0186%" height="15" fill="rgb(206,188,39)"/><text x="0.3305%" y="223.50"></text></g><g><title>GloveExample`std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::underflow (3 samples, 0.02%)</title><rect x="0.0805%" y="197" width="0.0186%" height="15" fill="rgb(217,207,13)"/><text x="0.3305%" y="207.50"></text></g><g><title>libsystem_c.dylib`fread (3 samples, 0.02%)</title><rect x="0.0805%" y="181" width="0.0186%" height="15" fill="rgb(231,73,38)"/><text x="0.3305%" y="191.50"></text></g><g><title>libsystem_c.dylib`__fread (3 samples, 0.02%)</title><rect x="0.0805%" y="165" width="0.0186%" height="15" fill="rgb(225,20,46)"/><text x="0.3305%" y="175.50"></text></g><g><title>libsystem_c.dylib`__srefill1 (3 samples, 0.02%)</title><rect x="0.0805%" y="149" width="0.0186%" height="15" fill="rgb(210,31,41)"/><text x="0.3305%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__read_nocancel (3 samples, 0.02%)</title><rect x="0.0805%" y="133" width="0.0186%" height="15" fill="rgb(221,200,47)"/><text x="0.3305%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.01%)</title><rect x="0.2537%" y="117" width="0.0124%" height="15" fill="rgb(226,26,5)"/><text x="0.5037%" y="127.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.02%)</title><rect x="0.2537%" y="181" width="0.0186%" height="15" fill="rgb(249,33,26)"/><text x="0.5037%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.02%)</title><rect x="0.2537%" y="165" width="0.0186%" height="15" fill="rgb(235,183,28)"/><text x="0.5037%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.02%)</title><rect x="0.2537%" y="149" width="0.0186%" height="15" fill="rgb(221,5,38)"/><text x="0.5037%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="0.2537%" y="133" width="0.0186%" height="15" fill="rgb(247,18,42)"/><text x="0.5037%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="0.2785%" y="181" width="0.0124%" height="15" fill="rgb(241,131,45)"/><text x="0.5285%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="0.2785%" y="165" width="0.0124%" height="15" fill="rgb(249,31,29)"/><text x="0.5285%" y="175.50"></text></g><g><title>GloveExample`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp; std::__1::getline&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;(std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (42 samples, 0.26%)</title><rect x="0.0371%" y="229" width="0.2599%" height="15" fill="rgb(225,111,53)"/><text x="0.2871%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back (32 samples, 0.20%)</title><rect x="0.0990%" y="213" width="0.1980%" height="15" fill="rgb(238,160,17)"/><text x="0.3490%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by (7 samples, 0.04%)</title><rect x="0.2537%" y="197" width="0.0433%" height="15" fill="rgb(214,148,48)"/><text x="0.5037%" y="207.50"></text></g><g><title>GloveExample`std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator (3 samples, 0.02%)</title><rect x="0.3033%" y="229" width="0.0186%" height="15" fill="rgb(232,36,49)"/><text x="0.5533%" y="239.50"></text></g><g><title>GloveExample`std::__1::__tree_node_base&lt;void*&gt;*&amp; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::__find_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;(std::__1::__tree_end_node&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;*&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (2 samples, 0.01%)</title><rect x="0.3094%" y="213" width="0.0124%" height="15" fill="rgb(209,103,24)"/><text x="0.5594%" y="223.50"></text></g><g><title>GloveExample`void std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::__assign_multi&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node (6 samples, 0.04%)</title><rect x="0.3218%" y="229" width="0.0371%" height="15" fill="rgb(229,88,8)"/><text x="0.5718%" y="239.50"></text></g><g><title>GloveExample`std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;*, long&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type (6 samples, 0.04%)</title><rect x="0.3218%" y="213" width="0.0371%" height="15" fill="rgb(213,181,19)"/><text x="0.5718%" y="223.50"></text></g><g><title>GloveExample`std::__1::unique_ptr&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;, std::__1::__tree_node_destructor&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt; &gt; &gt; &gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits (4 samples, 0.02%)</title><rect x="0.3342%" y="197" width="0.0248%" height="15" fill="rgb(254,191,54)"/><text x="0.5842%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="0.3404%" y="181" width="0.0186%" height="15" fill="rgb(241,83,37)"/><text x="0.5904%" y="191.50"></text></g><g><title>libc+ (3 samples, 0.02%)</title><rect x="0.3651%" y="229" width="0.0186%" height="15" fill="rgb(233,36,39)"/><text x="0.6151%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__release_shared (4 samples, 0.02%)</title><rect x="0.3837%" y="229" width="0.0248%" height="15" fill="rgb(226,3,54)"/><text x="0.6337%" y="239.50"></text></g><g><title>libc+ (7 samples, 0.04%)</title><rect x="0.4270%" y="213" width="0.0433%" height="15" fill="rgb(245,192,40)"/><text x="0.6770%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__add_shared (5 samples, 0.03%)</title><rect x="0.4827%" y="213" width="0.0309%" height="15" fill="rgb(238,167,29)"/><text x="0.7327%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__release_shared (10 samples, 0.06%)</title><rect x="0.5137%" y="213" width="0.0619%" height="15" fill="rgb(232,182,51)"/><text x="0.7637%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__add_shared (3 samples, 0.02%)</title><rect x="0.5879%" y="197" width="0.0186%" height="15" fill="rgb(231,60,39)"/><text x="0.8379%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sentry::sentry(std::__1::basic_istream&lt;char, std::__1::char_traits (6 samples, 0.04%)</title><rect x="0.5756%" y="213" width="0.0371%" height="15" fill="rgb(208,69,12)"/><text x="0.8256%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::ios_base::clear (2 samples, 0.01%)</title><rect x="0.6127%" y="213" width="0.0124%" height="15" fill="rgb(235,93,37)"/><text x="0.8627%" y="223.50"></text></g><g><title>libc+ (3 samples, 0.02%)</title><rect x="0.9407%" y="197" width="0.0186%" height="15" fill="rgb(213,116,39)"/><text x="1.1907%" y="207.50"></text></g><g><title>libsystem_c.dylib`__any_on_D2A (2 samples, 0.01%)</title><rect x="1.3492%" y="149" width="0.0124%" height="15" fill="rgb(222,207,29)"/><text x="1.5992%" y="159.50"></text></g><g><title>libsystem_c.dylib`__copybits_D2A (2 samples, 0.01%)</title><rect x="1.3616%" y="149" width="0.0124%" height="15" fill="rgb(206,96,30)"/><text x="1.6116%" y="159.50"></text></g><g><title>libsystem_c.dylib`__Bfree_D2A (7 samples, 0.04%)</title><rect x="1.4668%" y="133" width="0.0433%" height="15" fill="rgb(218,138,4)"/><text x="1.7168%" y="143.50"></text></g><g><title>libsystem_c.dylib`__any_on_D2A (3 samples, 0.02%)</title><rect x="1.5101%" y="133" width="0.0186%" height="15" fill="rgb(250,191,14)"/><text x="1.7601%" y="143.50"></text></g><g><title>libsystem_c.dylib`__d2b_D2A (16 samples, 0.10%)</title><rect x="1.5287%" y="133" width="0.0990%" height="15" fill="rgb(239,60,40)"/><text x="1.7787%" y="143.50"></text></g><g><title>libsystem_c.dylib`__lo0bits_D2A (6 samples, 0.04%)</title><rect x="1.5905%" y="117" width="0.0371%" height="15" fill="rgb(206,27,48)"/><text x="1.8405%" y="127.50"></text></g><g><title>libsystem_c.dylib`__hi0bits_D2A (4 samples, 0.02%)</title><rect x="1.6277%" y="133" width="0.0248%" height="15" fill="rgb(225,35,8)"/><text x="1.8777%" y="143.50"></text></g><g><title>libsystem_c.dylib`__lo0bits_D2A (3 samples, 0.02%)</title><rect x="1.6586%" y="133" width="0.0186%" height="15" fill="rgb(250,213,24)"/><text x="1.9086%" y="143.50"></text></g><g><title>libsystem_c.dylib`__rvOK_D2A (56 samples, 0.35%)</title><rect x="1.3801%" y="149" width="0.3466%" height="15" fill="rgb(247,123,22)"/><text x="1.6301%" y="159.50"></text></g><g><title>libsystem_c.dylib`__rshift_D2A (8 samples, 0.05%)</title><rect x="1.6772%" y="133" width="0.0495%" height="15" fill="rgb(231,138,38)"/><text x="1.9272%" y="143.50"></text></g><g><title>libsystem_c.dylib`__strtodg (109 samples, 0.67%)</title><rect x="1.0707%" y="165" width="0.6746%" height="15" fill="rgb(231,145,46)"/><text x="1.3207%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (2 samples, 0.01%)</title><rect x="1.7329%" y="149" width="0.0124%" height="15" fill="rgb(251,118,11)"/><text x="1.9829%" y="159.50"></text></g><g><title>libc++.1.dylib`float std::__1::__num_get_float&lt;float&gt; (129 samples, 0.80%)</title><rect x="0.9593%" y="197" width="0.7984%" height="15" fill="rgb(217,147,25)"/><text x="1.2093%" y="207.50"></text></g><g><title>libsystem_c.dylib`strtof_l (122 samples, 0.76%)</title><rect x="1.0026%" y="181" width="0.7550%" height="15" fill="rgb(247,81,37)"/><text x="1.2526%" y="191.50"></text></g><g><title>libsystem_c.dylib`localeconv_l (2 samples, 0.01%)</title><rect x="1.7453%" y="165" width="0.0124%" height="15" fill="rgb(209,12,38)"/><text x="1.9953%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::__num_get&lt;char&gt;::__stage2_float_loop(char, bool&amp;, char&amp;, char*, char*&amp;, char, char, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (119 samples, 0.74%)</title><rect x="1.7576%" y="197" width="0.7365%" height="15" fill="rgb(227,1,9)"/><text x="2.0076%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::ctype&lt;char&gt;::do_widen (12 samples, 0.07%)</title><rect x="2.5374%" y="181" width="0.0743%" height="15" fill="rgb(248,47,43)"/><text x="2.7874%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::ios_base::getloc (5 samples, 0.03%)</title><rect x="2.6117%" y="181" width="0.0309%" height="15" fill="rgb(221,10,30)"/><text x="2.8617%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__add_shared (5 samples, 0.03%)</title><rect x="2.6117%" y="165" width="0.0309%" height="15" fill="rgb(210,229,1)"/><text x="2.8617%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::id::__get (6 samples, 0.04%)</title><rect x="2.6427%" y="181" width="0.0371%" height="15" fill="rgb(222,148,37)"/><text x="2.8927%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::__num_get&lt;char&gt;::__stage2_float_prep (31 samples, 0.19%)</title><rect x="2.4941%" y="197" width="0.1919%" height="15" fill="rgb(234,67,33)"/><text x="2.7441%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__release_shared (6 samples, 0.04%)</title><rect x="2.6860%" y="197" width="0.0371%" height="15" fill="rgb(247,98,35)"/><text x="2.9360%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize (9 samples, 0.06%)</title><rect x="2.7231%" y="197" width="0.0557%" height="15" fill="rgb(247,138,52)"/><text x="2.9731%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append (9 samples, 0.06%)</title><rect x="2.7231%" y="181" width="0.0557%" height="15" fill="rgb(213,79,30)"/><text x="2.9731%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="2.7664%" y="165" width="0.0124%" height="15" fill="rgb(246,177,23)"/><text x="3.0164%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; std::__1::num_get&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt;::__do_get_floating_point&lt;float&gt;(std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt;, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits (355 samples, 2.20%)</title><rect x="0.6251%" y="213" width="2.1971%" height="15" fill="rgb(230,62,27)"/><text x="0.8751%" y="223.50">l..</text></g><g><title>libsystem_kernel.dylib`__error (4 samples, 0.02%)</title><rect x="2.7974%" y="197" width="0.0248%" height="15" fill="rgb(216,154,8)"/><text x="3.0474%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::operator&gt;&gt; (395 samples, 2.44%)</title><rect x="0.4085%" y="229" width="2.4446%" height="15" fill="rgb(244,35,45)"/><text x="0.6585%" y="239.50">li..</text></g><g><title>libc++.1.dylib`std::__1::locale::use_facet (4 samples, 0.02%)</title><rect x="2.8283%" y="213" width="0.0248%" height="15" fill="rgb(251,115,12)"/><text x="3.0783%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::id::__get (2 samples, 0.01%)</title><rect x="2.8407%" y="197" width="0.0124%" height="15" fill="rgb(240,54,50)"/><text x="3.0907%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="2.8655%" y="229" width="0.0186%" height="15" fill="rgb(233,84,52)"/><text x="3.1155%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="2.8716%" y="213" width="0.0124%" height="15" fill="rgb(207,117,47)"/><text x="3.1216%" y="223.50"></text></g><g><title>GloveExample`Dataset::read_glove(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (470 samples, 2.91%)</title><rect x="0.0000%" y="245" width="2.9088%" height="15" fill="rgb(249,43,39)"/><text x="0.2500%" y="255.50">Gl..</text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.02%)</title><rect x="2.8840%" y="229" width="0.0248%" height="15" fill="rgb(209,38,44)"/><text x="3.1340%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.02%)</title><rect x="2.8902%" y="213" width="0.0186%" height="15" fill="rgb(236,212,23)"/><text x="3.1402%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="2.8964%" y="197" width="0.0124%" height="15" fill="rgb(242,79,21)"/><text x="3.1464%" y="207.50"></text></g><g><title>GloveExample`puffinn::UnitVectorFormat::generate_random (3 samples, 0.02%)</title><rect x="2.9088%" y="165" width="0.0186%" height="15" fill="rgb(211,96,35)"/><text x="3.1588%" y="175.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::Index(unsigned int, unsigned long long, puffinn::HashSourceArgs&lt;puffinn::FHTCrossPolytopeHash&gt; const&amp;, puffinn::HashSourceArgs (6 samples, 0.04%)</title><rect x="2.9088%" y="245" width="0.0371%" height="15" fill="rgb(253,215,40)"/><text x="3.1588%" y="255.50"></text></g><g><title>GloveExample`puffinn::Filterer&lt;puffinn::SimHash&gt;::Filterer(puffinn::HashSourceArgs&lt;puffinn::SimHash&gt; const&amp;, puffinn::DatasetDescription (6 samples, 0.04%)</title><rect x="2.9088%" y="229" width="0.0371%" height="15" fill="rgb(211,81,21)"/><text x="3.1588%" y="239.50"></text></g><g><title>GloveExample`puffinn::IndependentHashArgs&lt;puffinn::SimHash&gt;::build(puffinn::DatasetDescription (6 samples, 0.04%)</title><rect x="2.9088%" y="213" width="0.0371%" height="15" fill="rgb(208,190,38)"/><text x="3.1588%" y="223.50"></text></g><g><title>GloveExample`puffinn::IndependentHashSource&lt;puffinn::SimHash&gt;::IndependentHashSource(puffinn::DatasetDescription (6 samples, 0.04%)</title><rect x="2.9088%" y="197" width="0.0371%" height="15" fill="rgb(235,213,38)"/><text x="3.1588%" y="207.50"></text></g><g><title>GloveExample`puffinn::SimHashFunction::SimHashFunction(puffinn::DatasetDescription (6 samples, 0.04%)</title><rect x="2.9088%" y="181" width="0.0371%" height="15" fill="rgb(237,122,38)"/><text x="3.1588%" y="191.50"></text></g><g><title>libsystem_m.dylib`logf (3 samples, 0.02%)</title><rect x="2.9273%" y="165" width="0.0186%" height="15" fill="rgb(244,218,35)"/><text x="3.1773%" y="175.50"></text></g><g><title>GloveExample`puffinn::Filterer&lt;puffinn::SimHash&gt;::add_sketches(puffinn::Dataset (289 samples, 1.79%)</title><rect x="2.9459%" y="229" width="1.7886%" height="15" fill="rgb(240,68,47)"/><text x="3.1959%" y="239.50">G..</text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::SimHash&gt;::operator() (287 samples, 1.78%)</title><rect x="2.9583%" y="213" width="1.7762%" height="15" fill="rgb(210,16,53)"/><text x="3.2083%" y="223.50">G..</text></g><g><title>GloveExample`double std::__1::normal_distribution&lt;double&gt;::operator()&lt;std::__1::linear_congruential_engine&lt;unsigned int, 48271u, 0u, 2147483647u&gt; &gt;(std::__1::linear_congruential_engine&lt;unsigned int, 48271u, 0u, 2147483647u&gt;&amp;, std::__1::normal_distribution (8 samples, 0.05%)</title><rect x="4.7345%" y="197" width="0.0495%" height="15" fill="rgb(235,124,12)"/><text x="4.9845%" y="207.50"></text></g><g><title>GloveExample`double std::__1::normal_distribution&lt;double&gt;::operator()&lt;std::__1::linear_congruential_engine&lt;unsigned int, 48271u, 0u, 2147483647u&gt; &gt;(std::__1::linear_congruential_engine&lt;unsigned int, 48271u, 0u, 2147483647u&gt;&amp;, std::__1::normal_distribution (948 samples, 5.87%)</title><rect x="5.5391%" y="181" width="5.8671%" height="15" fill="rgb(224,169,11)"/><text x="5.7891%" y="191.50">GloveEx..</text></g><g><title>GloveExample`puffinn::CrossPolytopeCollisionEstimates::CrossPolytopeCollisionEstimates (1,442 samples, 8.92%)</title><rect x="4.7902%" y="197" width="8.9244%" height="15" fill="rgb(250,166,2)"/><text x="5.0402%" y="207.50">GloveExample`..</text></g><g><title>libsystem_m.dylib`0x00007fff78580860 (373 samples, 2.31%)</title><rect x="11.4061%" y="181" width="2.3085%" height="15" fill="rgb(242,216,29)"/><text x="11.6561%" y="191.50">l..</text></g><g><title>GloveExample`puffinn::IndependentHashArgs&lt;puffinn::FHTCrossPolytopeHash&gt;::build(puffinn::DatasetDescription (1,465 samples, 9.07%)</title><rect x="4.7345%" y="229" width="9.0667%" height="15" fill="rgb(230,116,27)"/><text x="4.9845%" y="239.50">GloveExample`..</text></g><g><title>GloveExample`puffinn::IndependentHashSource&lt;puffinn::FHTCrossPolytopeHash&gt;::IndependentHashSource(puffinn::DatasetDescription (1,465 samples, 9.07%)</title><rect x="4.7345%" y="213" width="9.0667%" height="15" fill="rgb(228,99,48)"/><text x="4.9845%" y="223.50">GloveExample`..</text></g><g><title>GloveExample`puffinn::FHTCrossPolytopeHashFunction::FHTCrossPolytopeHashFunction(puffinn::DatasetDescription (14 samples, 0.09%)</title><rect x="13.7146%" y="197" width="0.0866%" height="15" fill="rgb(253,11,6)"/><text x="13.9646%" y="207.50"></text></g><g><title>GloveExample`int std::__1::uniform_int_distribution&lt;int&gt;::operator()&lt;std::__1::linear_congruential_engine&lt;unsigned int, 48271u, 0u, 2147483647u&gt; &gt;(std::__1::linear_congruential_engine&lt;unsigned int, 48271u, 0u, 2147483647u&gt;&amp;, std::__1::uniform_int_distribution (11 samples, 0.07%)</title><rect x="13.7331%" y="181" width="0.0681%" height="15" fill="rgb(247,143,39)"/><text x="13.9831%" y="191.50"></text></g><g><title>GloveExample`puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild (3 samples, 0.02%)</title><rect x="13.8198%" y="213" width="0.0186%" height="15" fill="rgb(236,97,10)"/><text x="14.0698%" y="223.50"></text></g><g><title>GloveExample`puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::PrefixMap(std::__1::unique_ptr&lt;puffinn::Hash, std::__1::default_delete (12 samples, 0.07%)</title><rect x="13.8198%" y="229" width="0.0743%" height="15" fill="rgb(233,208,19)"/><text x="14.0698%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (9 samples, 0.06%)</title><rect x="13.8383%" y="213" width="0.0557%" height="15" fill="rgb(216,164,2)"/><text x="14.0883%" y="223.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (4 samples, 0.02%)</title><rect x="15.1318%" y="181" width="0.0248%" height="15" fill="rgb(220,129,5)"/><text x="15.3818%" y="191.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (2 samples, 0.01%)</title><rect x="15.5465%" y="165" width="0.0124%" height="15" fill="rgb(242,17,10)"/><text x="15.7965%" y="175.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort5&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (3 samples, 0.02%)</title><rect x="15.5589%" y="165" width="0.0186%" height="15" fill="rgb(242,107,0)"/><text x="15.8089%" y="175.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (7 samples, 0.04%)</title><rect x="15.9178%" y="149" width="0.0433%" height="15" fill="rgb(251,28,31)"/><text x="16.1678%" y="159.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort5&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (3 samples, 0.02%)</title><rect x="15.9611%" y="149" width="0.0186%" height="15" fill="rgb(233,223,10)"/><text x="16.2111%" y="159.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (7 samples, 0.04%)</title><rect x="16.1406%" y="133" width="0.0433%" height="15" fill="rgb(215,21,27)"/><text x="16.3906%" y="143.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort5&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (2 samples, 0.01%)</title><rect x="16.1839%" y="133" width="0.0124%" height="15" fill="rgb(232,23,21)"/><text x="16.4339%" y="143.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (5 samples, 0.03%)</title><rect x="16.2582%" y="117" width="0.0309%" height="15" fill="rgb(244,5,23)"/><text x="16.5082%" y="127.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (318 samples, 1.97%)</title><rect x="14.3458%" y="213" width="1.9681%" height="15" fill="rgb(226,81,46)"/><text x="14.5958%" y="223.50">G..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (252 samples, 1.56%)</title><rect x="14.7543%" y="197" width="1.5596%" height="15" fill="rgb(247,70,30)"/><text x="15.0043%" y="207.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (186 samples, 1.15%)</title><rect x="15.1628%" y="181" width="1.1511%" height="15" fill="rgb(212,68,19)"/><text x="15.4128%" y="191.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (119 samples, 0.74%)</title><rect x="15.5774%" y="165" width="0.7365%" height="15" fill="rgb(240,187,13)"/><text x="15.8274%" y="175.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (54 samples, 0.33%)</title><rect x="15.9797%" y="149" width="0.3342%" height="15" fill="rgb(223,113,26)"/><text x="16.2297%" y="159.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (19 samples, 0.12%)</title><rect x="16.1963%" y="133" width="0.1176%" height="15" fill="rgb(206,192,2)"/><text x="16.4463%" y="143.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (3 samples, 0.02%)</title><rect x="16.2953%" y="117" width="0.0186%" height="15" fill="rgb(241,108,4)"/><text x="16.5453%" y="127.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (2 samples, 0.01%)</title><rect x="16.3015%" y="101" width="0.0124%" height="15" fill="rgb(247,173,49)"/><text x="16.5515%" y="111.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (7 samples, 0.04%)</title><rect x="16.3139%" y="213" width="0.0433%" height="15" fill="rgb(224,114,35)"/><text x="16.5639%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.04%)</title><rect x="16.3139%" y="197" width="0.0433%" height="15" fill="rgb(245,159,27)"/><text x="16.5639%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (7 samples, 0.04%)</title><rect x="16.3139%" y="181" width="0.0433%" height="15" fill="rgb(245,172,44)"/><text x="16.5639%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.04%)</title><rect x="16.3139%" y="165" width="0.0433%" height="15" fill="rgb(236,23,11)"/><text x="16.5639%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (7 samples, 0.04%)</title><rect x="16.3139%" y="149" width="0.0433%" height="15" fill="rgb(205,117,38)"/><text x="16.5639%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (5 samples, 0.03%)</title><rect x="16.3263%" y="133" width="0.0309%" height="15" fill="rgb(237,72,25)"/><text x="16.5763%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (5 samples, 0.03%)</title><rect x="16.3263%" y="117" width="0.0309%" height="15" fill="rgb(244,70,9)"/><text x="16.5763%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.02%)</title><rect x="16.3572%" y="213" width="0.0248%" height="15" fill="rgb(217,125,39)"/><text x="16.6072%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.02%)</title><rect x="16.3820%" y="213" width="0.0248%" height="15" fill="rgb(235,36,10)"/><text x="16.6320%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.02%)</title><rect x="16.3820%" y="197" width="0.0248%" height="15" fill="rgb(251,123,47)"/><text x="16.6320%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.02%)</title><rect x="16.3820%" y="181" width="0.0248%" height="15" fill="rgb(221,13,13)"/><text x="16.6320%" y="191.50"></text></g><g><title>GloveExample`puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild (411 samples, 2.54%)</title><rect x="13.8940%" y="229" width="2.5436%" height="15" fill="rgb(238,131,9)"/><text x="14.1440%" y="239.50">Gl..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="16.4067%" y="213" width="0.0309%" height="15" fill="rgb(211,50,8)"/><text x="16.6567%" y="223.50"></text></g><g><title>GloveExample`puffinn::FHTCrossPolytopeHashFunction::operator() (4 samples, 0.02%)</title><rect x="16.8461%" y="149" width="0.0248%" height="15" fill="rgb(245,182,24)"/><text x="17.0961%" y="159.50"></text></g><g><title>GloveExample`fht_float (13 samples, 0.08%)</title><rect x="17.0875%" y="133" width="0.0805%" height="15" fill="rgb(242,14,37)"/><text x="17.3375%" y="143.50"></text></g><g><title>GloveExample`fht_float (893 samples, 5.53%)</title><rect x="28.0790%" y="117" width="5.5267%" height="15" fill="rgb(246,228,12)"/><text x="28.3290%" y="127.50">GloveEx..</text></g><g><title>GloveExample`puffinn::FHTCrossPolytopeHashFunction::operator() (2,672 samples, 16.54%)</title><rect x="17.1680%" y="133" width="16.5367%" height="15" fill="rgb(213,55,15)"/><text x="17.4180%" y="143.50">GloveExample`puffinn::FHTC..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (16 samples, 0.10%)</title><rect x="33.6056%" y="117" width="0.0990%" height="15" fill="rgb(209,9,3)"/><text x="33.8556%" y="127.50"></text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::FHTCrossPolytopeHash&gt;::operator() (2,725 samples, 16.86%)</title><rect x="16.8709%" y="149" width="16.8647%" height="15" fill="rgb(230,59,30)"/><text x="17.1209%" y="159.50">GloveExample`puffinn::Inde..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="33.7047%" y="133" width="0.0309%" height="15" fill="rgb(209,121,21)"/><text x="33.9547%" y="143.50"></text></g><g><title>GloveExample`.omp_outlined. (2,795 samples, 17.30%)</title><rect x="16.4501%" y="165" width="17.2979%" height="15" fill="rgb(220,109,13)"/><text x="16.7001%" y="175.50">GloveExample`.omp_outlined.</text></g><g><title>libomp.dylib`__kmp_fork_call (2,801 samples, 17.34%)</title><rect x="16.4377%" y="213" width="17.3351%" height="15" fill="rgb(232,18,1)"/><text x="16.6877%" y="223.50">libomp.dylib`__kmp_fork_call</text></g><g><title>libomp.dylib`__kmp_invoke_task_func (2,799 samples, 17.32%)</title><rect x="16.4501%" y="197" width="17.3227%" height="15" fill="rgb(215,41,42)"/><text x="16.7001%" y="207.50">libomp.dylib`__kmp_invoke_t..</text></g><g><title>libomp.dylib`__kmp_invoke_microtask (2,799 samples, 17.32%)</title><rect x="16.4501%" y="181" width="17.3227%" height="15" fill="rgb(224,123,36)"/><text x="16.7001%" y="191.50">libomp.dylib`__kmp_invoke_m..</text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::FHTCrossPolytopeHash&gt;::operator() (4 samples, 0.02%)</title><rect x="33.7480%" y="165" width="0.0248%" height="15" fill="rgb(240,125,3)"/><text x="33.9980%" y="175.50"></text></g><g><title>libomp.dylib`__kmp_hardware_timestamp (46 samples, 0.28%)</title><rect x="33.8284%" y="149" width="0.2847%" height="15" fill="rgb(205,98,50)"/><text x="34.0784%" y="159.50"></text></g><g><title>libomp.dylib`__kmp_join_call (567 samples, 3.51%)</title><rect x="33.7789%" y="213" width="3.5091%" height="15" fill="rgb(205,185,37)"/><text x="34.0289%" y="223.50">lib..</text></g><g><title>libomp.dylib`__kmp_internal_join (562 samples, 3.48%)</title><rect x="33.8099%" y="197" width="3.4782%" height="15" fill="rgb(238,207,15)"/><text x="34.0599%" y="207.50">lib..</text></g><g><title>libomp.dylib`__kmp_join_barrier(int) (561 samples, 3.47%)</title><rect x="33.8161%" y="181" width="3.4720%" height="15" fill="rgb(213,199,42)"/><text x="34.0661%" y="191.50">lib..</text></g><g><title>libomp.dylib`__kmp_hyper_barrier_gather(barrier_type, kmp_info*, int, int, void (*)(void*, void*), void*) (560 samples, 3.47%)</title><rect x="33.8223%" y="165" width="3.4658%" height="15" fill="rgb(235,201,11)"/><text x="34.0723%" y="175.50">lib..</text></g><g><title>libomp.dylib`kmp_flag_64::wait (513 samples, 3.17%)</title><rect x="34.1131%" y="149" width="3.1749%" height="15" fill="rgb(207,46,11)"/><text x="34.3631%" y="159.50">lib..</text></g><g><title>libsystem_kernel.dylib`swtch_pri (64 samples, 0.40%)</title><rect x="36.8919%" y="133" width="0.3961%" height="15" fill="rgb(241,35,35)"/><text x="37.1419%" y="143.50"></text></g><g><title>libomp.dylib`__kmpc_fork_call (3,371 samples, 20.86%)</title><rect x="16.4377%" y="229" width="20.8627%" height="15" fill="rgb(243,32,47)"/><text x="16.6877%" y="239.50">libomp.dylib`__kmpc_fork_call</text></g><g><title>libomp.dylib`__kmp_release_ticket_lock (2 samples, 0.01%)</title><rect x="37.2880%" y="213" width="0.0124%" height="15" fill="rgb(247,202,23)"/><text x="37.5380%" y="223.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::rebuild (5,552 samples, 34.36%)</title><rect x="2.9459%" y="245" width="34.3607%" height="15" fill="rgb(219,102,11)"/><text x="3.1959%" y="255.50">GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, p..</text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="37.3128%" y="213" width="0.0124%" height="15" fill="rgb(243,110,44)"/><text x="37.5628%" y="223.50"></text></g><g><title>GloveExample`std::__1::__vector_base&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;, std::__1::allocator&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt; &gt; &gt;::~__vector_base (8 samples, 0.05%)</title><rect x="37.3066%" y="229" width="0.0495%" height="15" fill="rgb(222,74,54)"/><text x="37.5566%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.03%)</title><rect x="37.3252%" y="213" width="0.0309%" height="15" fill="rgb(216,99,12)"/><text x="37.5752%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.03%)</title><rect x="37.3252%" y="197" width="0.0309%" height="15" fill="rgb(226,22,26)"/><text x="37.5752%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.03%)</title><rect x="37.3252%" y="181" width="0.0309%" height="15" fill="rgb(217,163,10)"/><text x="37.5752%" y="191.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::~Index (9 samples, 0.06%)</title><rect x="37.3066%" y="245" width="0.0557%" height="15" fill="rgb(213,25,53)"/><text x="37.5566%" y="255.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.01%)</title><rect x="37.3623%" y="229" width="0.0124%" height="15" fill="rgb(252,105,26)"/><text x="37.6123%" y="239.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.01%)</title><rect x="37.3623%" y="213" width="0.0124%" height="15" fill="rgb(220,39,43)"/><text x="37.6123%" y="223.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.01%)</title><rect x="37.3623%" y="197" width="0.0124%" height="15" fill="rgb(229,68,48)"/><text x="37.6123%" y="207.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.01%)</title><rect x="37.3623%" y="181" width="0.0124%" height="15" fill="rgb(252,8,32)"/><text x="37.6123%" y="191.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.01%)</title><rect x="37.3623%" y="165" width="0.0124%" height="15" fill="rgb(223,20,43)"/><text x="37.6123%" y="175.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.01%)</title><rect x="37.3623%" y="149" width="0.0124%" height="15" fill="rgb(229,81,49)"/><text x="37.6123%" y="159.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.01%)</title><rect x="37.3623%" y="133" width="0.0124%" height="15" fill="rgb(236,28,36)"/><text x="37.6123%" y="143.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.01%)</title><rect x="37.3623%" y="117" width="0.0124%" height="15" fill="rgb(249,185,26)"/><text x="37.6123%" y="127.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.01%)</title><rect x="37.3623%" y="101" width="0.0124%" height="15" fill="rgb(249,174,33)"/><text x="37.6123%" y="111.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.02%)</title><rect x="37.3623%" y="245" width="0.0186%" height="15" fill="rgb(233,201,37)"/><text x="37.6123%" y="255.50"></text></g><g><title>GloveExample`std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator (2 samples, 0.01%)</title><rect x="37.3809%" y="245" width="0.0124%" height="15" fill="rgb(221,78,26)"/><text x="37.6309%" y="255.50"></text></g><g><title>GloveExample`std::__1::__tree_node_base&lt;void*&gt;*&amp; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::__find_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;(std::__1::__tree_end_node&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;*&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (2 samples, 0.01%)</title><rect x="37.3809%" y="229" width="0.0124%" height="15" fill="rgb(250,127,30)"/><text x="37.6309%" y="239.50"></text></g><g><title>GloveExample`std::__1::vector&lt;unsigned int, std::__1::allocator&lt;unsigned int&gt; &gt; puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::search&lt;std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;(std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.01%)</title><rect x="37.3932%" y="245" width="0.0124%" height="15" fill="rgb(230,49,44)"/><text x="37.6432%" y="255.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::search_formatted_query (2 samples, 0.01%)</title><rect x="37.3932%" y="229" width="0.0124%" height="15" fill="rgb(229,67,23)"/><text x="37.6432%" y="239.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::search_maps (2 samples, 0.01%)</title><rect x="37.3932%" y="213" width="0.0124%" height="15" fill="rgb(249,83,47)"/><text x="37.6432%" y="223.50"></text></g><g><title>GloveExample`puffinn::UnitVectorFormat::store(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; const&amp;, short*, puffinn::DatasetDescription (3 samples, 0.02%)</title><rect x="37.4056%" y="229" width="0.0186%" height="15" fill="rgb(215,43,3)"/><text x="37.6556%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="37.4056%" y="213" width="0.0186%" height="15" fill="rgb(238,154,13)"/><text x="37.6556%" y="223.50"></text></g><g><title>GloveExample`void puffinn::Dataset&lt;puffinn::UnitVectorFormat&gt;::insert&lt;std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;(std::__1::vector&lt;float, std::__1::allocator (8 samples, 0.05%)</title><rect x="37.4056%" y="245" width="0.0495%" height="15" fill="rgb(219,56,2)"/><text x="37.6556%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="37.4242%" y="229" width="0.0309%" height="15" fill="rgb(233,0,4)"/><text x="37.6742%" y="239.50"></text></g><g><title>GloveExample`main (6,055 samples, 37.47%)</title><rect x="0.0000%" y="261" width="37.4737%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="271.50">GloveExample`main</text></g><g><title>libc+ (3 samples, 0.02%)</title><rect x="37.4551%" y="245" width="0.0186%" height="15" fill="rgb(250,79,13)"/><text x="37.7051%" y="255.50"></text></g><g><title>GloveExample`0x5 (6,058 samples, 37.49%)</title><rect x="0.0000%" y="293" width="37.4923%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="303.50">GloveExample`0x5</text></g><g><title>libdyld.dylib`start (6,058 samples, 37.49%)</title><rect x="0.0000%" y="277" width="37.4923%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="287.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.02%)</title><rect x="37.4737%" y="261" width="0.0186%" height="15" fill="rgb(235,168,5)"/><text x="37.7237%" y="271.50"></text></g><g><title>libomp.dylib`__kmp_hardware_timestamp (210 samples, 1.30%)</title><rect x="37.5108%" y="181" width="1.2997%" height="15" fill="rgb(221,155,16)"/><text x="37.7608%" y="191.50"></text></g><g><title>libomp.dylib`__kmp_init_implicit_task (5 samples, 0.03%)</title><rect x="38.8105%" y="181" width="0.0309%" height="15" fill="rgb(215,215,53)"/><text x="39.0605%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (115 samples, 0.71%)</title><rect x="47.8710%" y="165" width="0.7117%" height="15" fill="rgb(223,4,10)"/><text x="48.1210%" y="175.50"></text></g><g><title>libomp.dylib`kmp_flag_64::wait (1,574 samples, 9.74%)</title><rect x="38.8476%" y="181" width="9.7413%" height="15" fill="rgb(234,103,6)"/><text x="39.0976%" y="191.50">libomp.dylib`k..</text></g><g><title>libomp.dylib`__kmp_fork_barrier(int, int) (1,794 samples, 11.10%)</title><rect x="37.4923%" y="213" width="11.1029%" height="15" fill="rgb(227,97,0)"/><text x="37.7423%" y="223.50">libomp.dylib`__k..</text></g><g><title>libomp.dylib`__kmp_hyper_barrier_release(barrier_type, kmp_info*, int, int, int, void*) (1,793 samples, 11.10%)</title><rect x="37.4985%" y="197" width="11.0967%" height="15" fill="rgb(234,150,53)"/><text x="37.7485%" y="207.50">libomp.dylib`__k..</text></g><g><title>GloveExample`puffinn::FHTCrossPolytopeHashFunction::operator() (6 samples, 0.04%)</title><rect x="49.5358%" y="165" width="0.0371%" height="15" fill="rgb(228,201,54)"/><text x="49.7858%" y="175.50"></text></g><g><title>GloveExample`DYLD-STUB$$__bzero (3 samples, 0.02%)</title><rect x="50.0557%" y="149" width="0.0186%" height="15" fill="rgb(222,22,37)"/><text x="50.3057%" y="159.50"></text></g><g><title>GloveExample`fht_float (33 samples, 0.20%)</title><rect x="50.0743%" y="149" width="0.2042%" height="15" fill="rgb(237,53,32)"/><text x="50.3243%" y="159.50"></text></g><g><title>GloveExample`fht_float (2,628 samples, 16.26%)</title><rect x="83.2962%" y="133" width="16.2644%" height="15" fill="rgb(233,25,53)"/><text x="83.5462%" y="143.50">GloveExample`fht_float</text></g><g><title>GloveExample`puffinn::FHTCrossPolytopeHashFunction::operator() (8,011 samples, 49.58%)</title><rect x="50.2785%" y="149" width="49.5792%" height="15" fill="rgb(210,40,34)"/><text x="50.5285%" y="159.50">GloveExample`puffinn::FHTCrossPolytopeHashFunction::operator()</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (48 samples, 0.30%)</title><rect x="99.5606%" y="133" width="0.2971%" height="15" fill="rgb(241,220,44)"/><text x="99.8106%" y="143.50"></text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::FHTCrossPolytopeHash&gt;::operator() (8,135 samples, 50.35%)</title><rect x="49.5730%" y="165" width="50.3466%" height="15" fill="rgb(235,28,35)"/><text x="49.8230%" y="175.50">GloveExample`puffinn::IndependentHasher&lt;puffinn::FHTCrossPolytopeHash&gt;::operator()</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (10 samples, 0.06%)</title><rect x="99.8577%" y="149" width="0.0619%" height="15" fill="rgb(210,56,17)"/><text x="100.1077%" y="159.50"></text></g><g><title>GloveExample`.omp_outlined. (8,295 samples, 51.34%)</title><rect x="48.6013%" y="181" width="51.3368%" height="15" fill="rgb(224,130,29)"/><text x="48.8513%" y="191.50">GloveExample`.omp_outlined.</text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::FHTCrossPolytopeHash&gt;::operator() (8 samples, 0.05%)</title><rect x="99.9381%" y="181" width="0.0495%" height="15" fill="rgb(235,212,8)"/><text x="100.1881%" y="191.50"></text></g><g><title>libomp.dylib`__kmp_invoke_task_func (8,305 samples, 51.40%)</title><rect x="48.5951%" y="213" width="51.3987%" height="15" fill="rgb(223,33,50)"/><text x="48.8451%" y="223.50">libomp.dylib`__kmp_invoke_task_func</text></g><g><title>libomp.dylib`__kmp_invoke_microtask (8,304 samples, 51.39%)</title><rect x="48.6013%" y="197" width="51.3925%" height="15" fill="rgb(219,149,13)"/><text x="48.8513%" y="207.50">libomp.dylib`__kmp_invoke_microtask</text></g><g><title>all (16,158 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(250,156,29)"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (10,100 samples, 62.51%)</title><rect x="37.4923%" y="293" width="62.5077%" height="15" fill="rgb(216,193,19)"/><text x="37.7423%" y="303.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (10,100 samples, 62.51%)</title><rect x="37.4923%" y="277" width="62.5077%" height="15" fill="rgb(216,135,14)"/><text x="37.7423%" y="287.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_body (10,100 samples, 62.51%)</title><rect x="37.4923%" y="261" width="62.5077%" height="15" fill="rgb(241,47,5)"/><text x="37.7423%" y="271.50">libsystem_pthread.dylib`_pthread_body</text></g><g><title>libomp.dylib`__kmp_launch_worker(void*) (10,100 samples, 62.51%)</title><rect x="37.4923%" y="245" width="62.5077%" height="15" fill="rgb(233,42,35)"/><text x="37.7423%" y="255.50">libomp.dylib`__kmp_launch_worker(void*)</text></g><g><title>libomp.dylib`__kmp_launch_thread (10,100 samples, 62.51%)</title><rect x="37.4923%" y="229" width="62.5077%" height="15" fill="rgb(231,13,6)"/><text x="37.7423%" y="239.50">libomp.dylib`__kmp_launch_thread</text></g></svg></svg>
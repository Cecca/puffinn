<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180"><g><title>GloveExample`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back (229 samples, 0.13%)</title><rect x="0.1605%" y="405" width="0.1322%" height="15" fill="rgb(227,0,7)"/><text x="0.4105%" y="415.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (51 samples, 0.03%)</title><rect x="0.3452%" y="69" width="0.0294%" height="15" fill="rgb(217,0,24)"/><text x="0.5952%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (30 samples, 0.02%)</title><rect x="0.3573%" y="53" width="0.0173%" height="15" fill="rgb(221,193,54)"/><text x="0.6073%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (27 samples, 0.02%)</title><rect x="0.3591%" y="37" width="0.0156%" height="15" fill="rgb(248,212,6)"/><text x="0.6091%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (33 samples, 0.02%)</title><rect x="0.4035%" y="37" width="0.0190%" height="15" fill="rgb(208,68,35)"/><text x="0.6535%" y="47.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (162 samples, 0.09%)</title><rect x="0.3308%" y="85" width="0.0935%" height="15" fill="rgb(232,128,0)"/><text x="0.5808%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (76 samples, 0.04%)</title><rect x="0.3804%" y="69" width="0.0439%" height="15" fill="rgb(207,160,47)"/><text x="0.6304%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (66 samples, 0.04%)</title><rect x="0.3862%" y="53" width="0.0381%" height="15" fill="rgb(228,23,34)"/><text x="0.6362%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (32 samples, 0.02%)</title><rect x="0.4739%" y="53" width="0.0185%" height="15" fill="rgb(218,30,26)"/><text x="0.7239%" y="63.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (312 samples, 0.18%)</title><rect x="0.3175%" y="101" width="0.1801%" height="15" fill="rgb(220,122,19)"/><text x="0.5675%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (112 samples, 0.06%)</title><rect x="0.4329%" y="85" width="0.0647%" height="15" fill="rgb(250,228,42)"/><text x="0.6829%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (91 samples, 0.05%)</title><rect x="0.4451%" y="69" width="0.0525%" height="15" fill="rgb(240,193,28)"/><text x="0.6951%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.01%)</title><rect x="0.5305%" y="69" width="0.0104%" height="15" fill="rgb(216,20,37)"/><text x="0.7805%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (41 samples, 0.02%)</title><rect x="0.5432%" y="69" width="0.0237%" height="15" fill="rgb(206,188,39)"/><text x="0.7932%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (112 samples, 0.06%)</title><rect x="0.5063%" y="101" width="0.0647%" height="15" fill="rgb(217,207,13)"/><text x="0.7563%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (102 samples, 0.06%)</title><rect x="0.5120%" y="85" width="0.0589%" height="15" fill="rgb(231,73,38)"/><text x="0.7620%" y="95.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (470 samples, 0.27%)</title><rect x="0.3031%" y="117" width="0.2713%" height="15" fill="rgb(225,20,46)"/><text x="0.5531%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (21 samples, 0.01%)</title><rect x="0.6055%" y="85" width="0.0121%" height="15" fill="rgb(210,31,41)"/><text x="0.8555%" y="95.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (555 samples, 0.32%)</title><rect x="0.2984%" y="133" width="0.3204%" height="15" fill="rgb(221,200,47)"/><text x="0.5484%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (63 samples, 0.04%)</title><rect x="0.5825%" y="117" width="0.0364%" height="15" fill="rgb(226,26,5)"/><text x="0.8325%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (54 samples, 0.03%)</title><rect x="0.5877%" y="101" width="0.0312%" height="15" fill="rgb(249,33,26)"/><text x="0.8377%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (41 samples, 0.02%)</title><rect x="0.6234%" y="133" width="0.0237%" height="15" fill="rgb(235,183,28)"/><text x="0.8734%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (35 samples, 0.02%)</title><rect x="0.6269%" y="117" width="0.0202%" height="15" fill="rgb(221,5,38)"/><text x="0.8769%" y="127.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (612 samples, 0.35%)</title><rect x="0.2944%" y="149" width="0.3533%" height="15" fill="rgb(247,18,42)"/><text x="0.5444%" y="159.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (642 samples, 0.37%)</title><rect x="0.2938%" y="165" width="0.3706%" height="15" fill="rgb(241,131,45)"/><text x="0.5438%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (28 samples, 0.02%)</title><rect x="0.6483%" y="149" width="0.0162%" height="15" fill="rgb(249,31,29)"/><text x="0.8983%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (24 samples, 0.01%)</title><rect x="0.6506%" y="133" width="0.0139%" height="15" fill="rgb(225,111,53)"/><text x="0.9006%" y="143.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (662 samples, 0.38%)</title><rect x="0.2927%" y="181" width="0.3821%" height="15" fill="rgb(238,160,17)"/><text x="0.5427%" y="191.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (678 samples, 0.39%)</title><rect x="0.2927%" y="197" width="0.3914%" height="15" fill="rgb(214,148,48)"/><text x="0.5427%" y="207.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (682 samples, 0.39%)</title><rect x="0.2927%" y="213" width="0.3937%" height="15" fill="rgb(232,36,49)"/><text x="0.5427%" y="223.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (685 samples, 0.40%)</title><rect x="0.2927%" y="229" width="0.3954%" height="15" fill="rgb(209,103,24)"/><text x="0.5427%" y="239.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (689 samples, 0.40%)</title><rect x="0.2927%" y="245" width="0.3977%" height="15" fill="rgb(229,88,8)"/><text x="0.5427%" y="255.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (690 samples, 0.40%)</title><rect x="0.2927%" y="405" width="0.3983%" height="15" fill="rgb(213,181,19)"/><text x="0.5427%" y="415.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (690 samples, 0.40%)</title><rect x="0.2927%" y="389" width="0.3983%" height="15" fill="rgb(254,191,54)"/><text x="0.5427%" y="399.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (690 samples, 0.40%)</title><rect x="0.2927%" y="373" width="0.3983%" height="15" fill="rgb(241,83,37)"/><text x="0.5427%" y="383.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (690 samples, 0.40%)</title><rect x="0.2927%" y="357" width="0.3983%" height="15" fill="rgb(233,36,39)"/><text x="0.5427%" y="367.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (690 samples, 0.40%)</title><rect x="0.2927%" y="341" width="0.3983%" height="15" fill="rgb(226,3,54)"/><text x="0.5427%" y="351.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (690 samples, 0.40%)</title><rect x="0.2927%" y="325" width="0.3983%" height="15" fill="rgb(245,192,40)"/><text x="0.5427%" y="335.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (690 samples, 0.40%)</title><rect x="0.2927%" y="309" width="0.3983%" height="15" fill="rgb(238,167,29)"/><text x="0.5427%" y="319.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (690 samples, 0.40%)</title><rect x="0.2927%" y="293" width="0.3983%" height="15" fill="rgb(232,182,51)"/><text x="0.5427%" y="303.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (690 samples, 0.40%)</title><rect x="0.2927%" y="277" width="0.3983%" height="15" fill="rgb(231,60,39)"/><text x="0.5427%" y="287.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (690 samples, 0.40%)</title><rect x="0.2927%" y="261" width="0.3983%" height="15" fill="rgb(208,69,12)"/><text x="0.5427%" y="271.50"></text></g><g><title>libsystem_c.dylib`__srefill1 (487 samples, 0.28%)</title><rect x="1.8068%" y="325" width="0.2811%" height="15" fill="rgb(235,93,37)"/><text x="2.0568%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__read_nocancel (479 samples, 0.28%)</title><rect x="1.8115%" y="309" width="0.2765%" height="15" fill="rgb(213,116,39)"/><text x="2.0615%" y="319.50"></text></g><g><title>libsystem_c.dylib`__fread (519 samples, 0.30%)</title><rect x="1.8034%" y="341" width="0.2996%" height="15" fill="rgb(222,207,29)"/><text x="2.0534%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (26 samples, 0.02%)</title><rect x="2.0880%" y="325" width="0.0150%" height="15" fill="rgb(206,96,30)"/><text x="2.3380%" y="335.50"></text></g><g><title>libsystem_c.dylib`fread (540 samples, 0.31%)</title><rect x="1.8022%" y="357" width="0.3117%" height="15" fill="rgb(218,138,4)"/><text x="2.0522%" y="367.50"></text></g><g><title>GloveExample`std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::underflow (550 samples, 0.32%)</title><rect x="1.7976%" y="373" width="0.3175%" height="15" fill="rgb(250,191,14)"/><text x="2.0476%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::uflow (559 samples, 0.32%)</title><rect x="1.7959%" y="389" width="0.3227%" height="15" fill="rgb(239,60,40)"/><text x="2.0459%" y="399.50"></text></g><g><title>libc+ (32 samples, 0.02%)</title><rect x="3.5000%" y="373" width="0.0185%" height="15" fill="rgb(206,27,48)"/><text x="3.7500%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (52 samples, 0.03%)</title><rect x="3.6004%" y="293" width="0.0300%" height="15" fill="rgb(225,35,8)"/><text x="3.8504%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (45 samples, 0.03%)</title><rect x="3.7199%" y="277" width="0.0260%" height="15" fill="rgb(250,213,24)"/><text x="3.9699%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (346 samples, 0.20%)</title><rect x="3.5860%" y="309" width="0.1997%" height="15" fill="rgb(247,123,22)"/><text x="3.8360%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (269 samples, 0.16%)</title><rect x="3.6304%" y="293" width="0.1553%" height="15" fill="rgb(231,138,38)"/><text x="3.8804%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (62 samples, 0.04%)</title><rect x="3.7499%" y="277" width="0.0358%" height="15" fill="rgb(231,145,46)"/><text x="3.9999%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (393 samples, 0.23%)</title><rect x="3.5600%" y="325" width="0.2269%" height="15" fill="rgb(251,118,11)"/><text x="3.8100%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`malloc (419 samples, 0.24%)</title><rect x="3.5473%" y="341" width="0.2419%" height="15" fill="rgb(217,147,25)"/><text x="3.7973%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (430 samples, 0.25%)</title><rect x="3.5421%" y="357" width="0.2482%" height="15" fill="rgb(247,81,37)"/><text x="3.7921%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (89 samples, 0.05%)</title><rect x="3.8001%" y="357" width="0.0514%" height="15" fill="rgb(209,12,38)"/><text x="4.0501%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (53 samples, 0.03%)</title><rect x="3.8209%" y="341" width="0.0306%" height="15" fill="rgb(227,1,9)"/><text x="4.0709%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (243 samples, 0.14%)</title><rect x="3.8515%" y="357" width="0.1403%" height="15" fill="rgb(248,47,43)"/><text x="4.1015%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (137 samples, 0.08%)</title><rect x="3.9127%" y="341" width="0.0791%" height="15" fill="rgb(221,10,30)"/><text x="4.1627%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (31 samples, 0.02%)</title><rect x="3.9739%" y="325" width="0.0179%" height="15" fill="rgb(210,229,1)"/><text x="4.2239%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by (967 samples, 0.56%)</title><rect x="3.5184%" y="373" width="0.5582%" height="15" fill="rgb(222,148,37)"/><text x="3.7684%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (131 samples, 0.08%)</title><rect x="4.0010%" y="357" width="0.0756%" height="15" fill="rgb(234,67,33)"/><text x="4.2510%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back (3,408 samples, 1.97%)</title><rect x="2.1203%" y="389" width="1.9673%" height="15" fill="rgb(247,98,35)"/><text x="2.3703%" y="399.50">l..</text></g><g><title>GloveExample`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp; std::__1::getline&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;(std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5,885 samples, 3.40%)</title><rect x="0.6916%" y="405" width="3.3972%" height="15" fill="rgb(247,138,52)"/><text x="0.9416%" y="415.50">Glo..</text></g><g><title>libc++.1.dylib`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sentry::sentry(std::__1::basic_istream&lt;char, std::__1::char_traits (25 samples, 0.01%)</title><rect x="4.1217%" y="389" width="0.0144%" height="15" fill="rgb(213,79,30)"/><text x="4.3717%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back (33 samples, 0.02%)</title><rect x="4.1361%" y="389" width="0.0190%" height="15" fill="rgb(246,177,23)"/><text x="4.3861%" y="399.50"></text></g><g><title>GloveExample`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp; std::__1::operator&gt;&gt;&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;(std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (128 samples, 0.07%)</title><rect x="4.0888%" y="405" width="0.0739%" height="15" fill="rgb(230,62,27)"/><text x="4.3388%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (68 samples, 0.04%)</title><rect x="4.1823%" y="293" width="0.0393%" height="15" fill="rgb(216,154,8)"/><text x="4.4323%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (63 samples, 0.04%)</title><rect x="4.1852%" y="277" width="0.0364%" height="15" fill="rgb(244,35,45)"/><text x="4.4352%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc (78 samples, 0.05%)</title><rect x="4.1771%" y="325" width="0.0450%" height="15" fill="rgb(251,115,12)"/><text x="4.4271%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (75 samples, 0.04%)</title><rect x="4.1788%" y="309" width="0.0433%" height="15" fill="rgb(240,54,50)"/><text x="4.4288%" y="319.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (81 samples, 0.05%)</title><rect x="4.1759%" y="341" width="0.0468%" height="15" fill="rgb(233,84,52)"/><text x="4.4259%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace (118 samples, 0.07%)</title><rect x="4.1684%" y="357" width="0.0681%" height="15" fill="rgb(207,117,47)"/><text x="4.4184%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (23 samples, 0.01%)</title><rect x="4.2233%" y="341" width="0.0133%" height="15" fill="rgb(249,43,39)"/><text x="4.4733%" y="351.50"></text></g><g><title>GloveExample`std::__1::basic_stringbuf&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::str(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (130 samples, 0.08%)</title><rect x="4.1626%" y="405" width="0.0750%" height="15" fill="rgb(209,38,44)"/><text x="4.4126%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::operator=(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (127 samples, 0.07%)</title><rect x="4.1644%" y="389" width="0.0733%" height="15" fill="rgb(236,212,23)"/><text x="4.4144%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign (124 samples, 0.07%)</title><rect x="4.1661%" y="373" width="0.0716%" height="15" fill="rgb(242,79,21)"/><text x="4.4161%" y="383.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (65 samples, 0.04%)</title><rect x="4.2400%" y="389" width="0.0375%" height="15" fill="rgb(211,96,35)"/><text x="4.4900%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`malloc (60 samples, 0.03%)</title><rect x="4.2429%" y="373" width="0.0346%" height="15" fill="rgb(253,215,40)"/><text x="4.4929%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (59 samples, 0.03%)</title><rect x="4.2435%" y="357" width="0.0341%" height="15" fill="rgb(211,81,21)"/><text x="4.4935%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (54 samples, 0.03%)</title><rect x="4.2464%" y="341" width="0.0312%" height="15" fill="rgb(208,190,38)"/><text x="4.4964%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (52 samples, 0.03%)</title><rect x="4.2475%" y="325" width="0.0300%" height="15" fill="rgb(235,213,38)"/><text x="4.4975%" y="335.50"></text></g><g><title>GloveExample`std::__1::enable_if&lt;(__is_forward_iterator&lt;float*&gt;::value) &amp;&amp; (is_constructible&lt;float, std::__1::iterator_traits&lt;float*&gt;::reference&gt;::value), void&gt;::type std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt;::assign&lt;float*&gt; (248 samples, 0.14%)</title><rect x="4.2377%" y="405" width="0.1432%" height="15" fill="rgb(237,122,38)"/><text x="4.4877%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (178 samples, 0.10%)</title><rect x="4.2781%" y="389" width="0.1028%" height="15" fill="rgb(244,218,35)"/><text x="4.5281%" y="399.50"></text></g><g><title>GloveExample`std::__1::enable_if&lt;(__is_forward_iterator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*&gt;::value) &amp;&amp; (is_constructible&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::iterator_traits&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*&gt;::reference&gt;::value), void&gt;::type std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;::assign&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (22 samples, 0.01%)</title><rect x="4.3809%" y="405" width="0.0127%" height="15" fill="rgb(240,68,47)"/><text x="4.6309%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (21 samples, 0.01%)</title><rect x="4.3814%" y="389" width="0.0121%" height="15" fill="rgb(210,16,53)"/><text x="4.6314%" y="399.50"></text></g><g><title>GloveExample`std::__1::__tree_node_base&lt;void*&gt;*&amp; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::__find_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;(std::__1::__tree_end_node&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;*&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (1,502 samples, 0.87%)</title><rect x="4.4097%" y="389" width="0.8671%" height="15" fill="rgb(235,124,12)"/><text x="4.6597%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (191 samples, 0.11%)</title><rect x="5.1665%" y="373" width="0.1103%" height="15" fill="rgb(224,169,11)"/><text x="5.4165%" y="383.50"></text></g><g><title>GloveExample`void std::__1::__tree_balance_after_insert&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (72 samples, 0.04%)</title><rect x="5.2768%" y="389" width="0.0416%" height="15" fill="rgb(250,166,2)"/><text x="5.5268%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (80 samples, 0.05%)</title><rect x="5.3299%" y="357" width="0.0462%" height="15" fill="rgb(242,216,29)"/><text x="5.5799%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (66 samples, 0.04%)</title><rect x="5.3380%" y="341" width="0.0381%" height="15" fill="rgb(230,116,27)"/><text x="5.5880%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (63 samples, 0.04%)</title><rect x="5.3397%" y="325" width="0.0364%" height="15" fill="rgb(228,99,48)"/><text x="5.5897%" y="335.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (90 samples, 0.05%)</title><rect x="5.3247%" y="389" width="0.0520%" height="15" fill="rgb(253,11,6)"/><text x="5.5747%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`malloc (89 samples, 0.05%)</title><rect x="5.3253%" y="373" width="0.0514%" height="15" fill="rgb(247,143,39)"/><text x="5.5753%" y="383.50"></text></g><g><title>GloveExample`std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator (1,755 samples, 1.01%)</title><rect x="4.3936%" y="405" width="1.0131%" height="15" fill="rgb(236,97,10)"/><text x="4.6436%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (47 samples, 0.03%)</title><rect x="5.3795%" y="389" width="0.0271%" height="15" fill="rgb(233,208,19)"/><text x="5.6295%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (61 samples, 0.04%)</title><rect x="5.5896%" y="357" width="0.0352%" height="15" fill="rgb(216,164,2)"/><text x="5.8396%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (108 samples, 0.06%)</title><rect x="5.6381%" y="309" width="0.0623%" height="15" fill="rgb(220,129,5)"/><text x="5.8881%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (101 samples, 0.06%)</title><rect x="5.6422%" y="293" width="0.0583%" height="15" fill="rgb(242,17,10)"/><text x="5.8922%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (25 samples, 0.01%)</title><rect x="5.6860%" y="277" width="0.0144%" height="15" fill="rgb(242,107,0)"/><text x="5.9360%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (125 samples, 0.07%)</title><rect x="5.6289%" y="325" width="0.0722%" height="15" fill="rgb(251,28,31)"/><text x="5.8789%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`malloc (133 samples, 0.08%)</title><rect x="5.6254%" y="341" width="0.0768%" height="15" fill="rgb(233,223,10)"/><text x="5.8754%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (135 samples, 0.08%)</title><rect x="5.6249%" y="357" width="0.0779%" height="15" fill="rgb(215,21,27)"/><text x="5.8749%" y="367.50"></text></g><g><title>GloveExample`std::__1::unique_ptr&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;, std::__1::__tree_node_destructor&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt; &gt; &gt; &gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits (494 samples, 0.29%)</title><rect x="5.5798%" y="373" width="0.2852%" height="15" fill="rgb(232,23,21)"/><text x="5.8298%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (279 samples, 0.16%)</title><rect x="5.7039%" y="357" width="0.1611%" height="15" fill="rgb(244,5,23)"/><text x="5.9539%" y="367.50"></text></g><g><title>GloveExample`void std::__1::__tree_balance_after_insert&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (26 samples, 0.02%)</title><rect x="5.8650%" y="373" width="0.0150%" height="15" fill="rgb(226,81,46)"/><text x="6.1150%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (92 samples, 0.05%)</title><rect x="5.8812%" y="373" width="0.0531%" height="15" fill="rgb(247,70,30)"/><text x="6.1312%" y="383.50"></text></g><g><title>GloveExample`std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;*, long&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type (771 samples, 0.45%)</title><rect x="5.4898%" y="389" width="0.4451%" height="15" fill="rgb(212,68,19)"/><text x="5.7398%" y="399.50"></text></g><g><title>GloveExample`void std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::__assign_multi&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node (942 samples, 0.54%)</title><rect x="5.4067%" y="405" width="0.5438%" height="15" fill="rgb(240,187,13)"/><text x="5.6567%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (27 samples, 0.02%)</title><rect x="5.9348%" y="389" width="0.0156%" height="15" fill="rgb(223,113,26)"/><text x="6.1848%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (60 samples, 0.03%)</title><rect x="6.0393%" y="341" width="0.0346%" height="15" fill="rgb(206,192,2)"/><text x="6.2893%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (33 samples, 0.02%)</title><rect x="6.2425%" y="309" width="0.0190%" height="15" fill="rgb(241,108,4)"/><text x="6.4925%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (436 samples, 0.25%)</title><rect x="6.0740%" y="341" width="0.2517%" height="15" fill="rgb(247,173,49)"/><text x="6.3240%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (412 samples, 0.24%)</title><rect x="6.0878%" y="325" width="0.2378%" height="15" fill="rgb(224,114,35)"/><text x="6.3378%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (106 samples, 0.06%)</title><rect x="6.2645%" y="309" width="0.0612%" height="15" fill="rgb(245,159,27)"/><text x="6.5145%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (527 samples, 0.30%)</title><rect x="6.0220%" y="357" width="0.3042%" height="15" fill="rgb(245,172,44)"/><text x="6.2720%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`malloc (561 samples, 0.32%)</title><rect x="6.0047%" y="373" width="0.3238%" height="15" fill="rgb(236,23,11)"/><text x="6.2547%" y="383.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (577 samples, 0.33%)</title><rect x="5.9978%" y="389" width="0.3331%" height="15" fill="rgb(205,117,38)"/><text x="6.2478%" y="399.50"></text></g><g><title>GloveExample`void std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt;::__push_back_slow_path&lt;float const&amp;&gt; (878 samples, 0.51%)</title><rect x="5.9510%" y="405" width="0.5068%" height="15" fill="rgb(237,72,25)"/><text x="6.2010%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (205 samples, 0.12%)</title><rect x="6.3395%" y="389" width="0.1183%" height="15" fill="rgb(244,70,9)"/><text x="6.5895%" y="399.50"></text></g><g><title>GloveExample`void std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;::__push_back_slow_path&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (23 samples, 0.01%)</title><rect x="6.4579%" y="405" width="0.0133%" height="15" fill="rgb(217,125,39)"/><text x="6.7079%" y="415.50"></text></g><g><title>libc+ (443 samples, 0.26%)</title><rect x="6.4711%" y="405" width="0.2557%" height="15" fill="rgb(235,36,10)"/><text x="6.7211%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__release_shared (611 samples, 0.35%)</title><rect x="6.7315%" y="405" width="0.3527%" height="15" fill="rgb(251,123,47)"/><text x="6.9815%" y="415.50"></text></g><g><title>libc+ (411 samples, 0.24%)</title><rect x="7.2960%" y="389" width="0.2373%" height="15" fill="rgb(221,13,13)"/><text x="7.5460%" y="399.50"></text></g><g><title>libc++.1.dylib`float std::__1::__num_get_float&lt;float&gt; (36 samples, 0.02%)</title><rect x="7.5333%" y="389" width="0.0208%" height="15" fill="rgb(238,131,9)"/><text x="7.7833%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::__check_grouping(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (52 samples, 0.03%)</title><rect x="7.5541%" y="389" width="0.0300%" height="15" fill="rgb(211,50,8)"/><text x="7.8041%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::__num_get&lt;char&gt;::__stage2_float_loop(char, bool&amp;, char&amp;, char*, char*&amp;, char, char, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (137 samples, 0.08%)</title><rect x="7.5841%" y="389" width="0.0791%" height="15" fill="rgb(245,182,24)"/><text x="7.8341%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__add_shared (620 samples, 0.36%)</title><rect x="7.6655%" y="389" width="0.3579%" height="15" fill="rgb(242,14,37)"/><text x="7.9155%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__release_shared (601 samples, 0.35%)</title><rect x="8.0234%" y="389" width="0.3469%" height="15" fill="rgb(246,228,12)"/><text x="8.2734%" y="399.50"></text></g><g><title>libc+ (24 samples, 0.01%)</title><rect x="8.8864%" y="373" width="0.0139%" height="15" fill="rgb(213,55,15)"/><text x="9.1364%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__add_shared (649 samples, 0.37%)</title><rect x="8.9003%" y="373" width="0.3746%" height="15" fill="rgb(209,9,3)"/><text x="9.1503%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::locale (33 samples, 0.02%)</title><rect x="9.2749%" y="373" width="0.0190%" height="15" fill="rgb(230,59,30)"/><text x="9.5249%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::use_facet (203 samples, 0.12%)</title><rect x="9.2939%" y="373" width="0.1172%" height="15" fill="rgb(209,121,21)"/><text x="9.5439%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::id::__get (105 samples, 0.06%)</title><rect x="9.3505%" y="357" width="0.0606%" height="15" fill="rgb(220,109,13)"/><text x="9.6005%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sentry::sentry(std::__1::basic_istream&lt;char, std::__1::char_traits (1,830 samples, 1.06%)</title><rect x="8.3703%" y="389" width="1.0564%" height="15" fill="rgb(232,18,1)"/><text x="8.6203%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::~locale (27 samples, 0.02%)</title><rect x="9.4111%" y="373" width="0.0156%" height="15" fill="rgb(215,41,42)"/><text x="9.6611%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize (82 samples, 0.05%)</title><rect x="9.4267%" y="389" width="0.0473%" height="15" fill="rgb(224,123,36)"/><text x="9.6767%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::ios_base::clear (87 samples, 0.05%)</title><rect x="9.4741%" y="389" width="0.0502%" height="15" fill="rgb(240,125,3)"/><text x="9.7241%" y="399.50"></text></g><g><title>libc+ (476 samples, 0.27%)</title><rect x="13.3238%" y="373" width="0.2748%" height="15" fill="rgb(205,98,50)"/><text x="13.5738%" y="383.50"></text></g><g><title>libsystem_c.dylib`__strtodg (39 samples, 0.02%)</title><rect x="13.9640%" y="357" width="0.0225%" height="15" fill="rgb(205,185,37)"/><text x="14.2140%" y="367.50"></text></g><g><title>libsystem_c.dylib`__rvOK_D2A (22 samples, 0.01%)</title><rect x="14.6250%" y="341" width="0.0127%" height="15" fill="rgb(238,207,15)"/><text x="14.8750%" y="351.50"></text></g><g><title>libsystem_c.dylib`__Bfree_D2A (41 samples, 0.02%)</title><rect x="17.9893%" y="325" width="0.0237%" height="15" fill="rgb(213,199,42)"/><text x="18.2393%" y="335.50"></text></g><g><title>libsystem_c.dylib`__any_on_D2A (116 samples, 0.07%)</title><rect x="18.0129%" y="325" width="0.0670%" height="15" fill="rgb(235,201,11)"/><text x="18.2629%" y="335.50"></text></g><g><title>libsystem_c.dylib`__copybits_D2A (315 samples, 0.18%)</title><rect x="18.0799%" y="325" width="0.1818%" height="15" fill="rgb(207,46,11)"/><text x="18.3299%" y="335.50"></text></g><g><title>libsystem_c.dylib`__d2b_D2A (43 samples, 0.02%)</title><rect x="18.2617%" y="325" width="0.0248%" height="15" fill="rgb(241,35,35)"/><text x="18.5117%" y="335.50"></text></g><g><title>libsystem_c.dylib`__increment_D2A (40 samples, 0.02%)</title><rect x="18.2946%" y="325" width="0.0231%" height="15" fill="rgb(243,32,47)"/><text x="18.5446%" y="335.50"></text></g><g><title>libsystem_c.dylib`__rshift_D2A (20 samples, 0.01%)</title><rect x="18.3200%" y="325" width="0.0115%" height="15" fill="rgb(247,202,23)"/><text x="18.5700%" y="335.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$pthread_getspecific (41 samples, 0.02%)</title><rect x="19.1906%" y="309" width="0.0237%" height="15" fill="rgb(219,102,11)"/><text x="19.4406%" y="319.50"></text></g><g><title>libsystem_c.dylib`__Balloc_D2A (18 samples, 0.01%)</title><rect x="19.2142%" y="309" width="0.0104%" height="15" fill="rgb(243,110,44)"/><text x="19.4642%" y="319.50"></text></g><g><title>libsystem_c.dylib`__Bfree_D2A (376 samples, 0.22%)</title><rect x="19.2246%" y="309" width="0.2171%" height="15" fill="rgb(222,74,54)"/><text x="19.4746%" y="319.50"></text></g><g><title>libsystem_c.dylib`__any_on_D2A (278 samples, 0.16%)</title><rect x="19.4417%" y="309" width="0.1605%" height="15" fill="rgb(216,99,12)"/><text x="19.6917%" y="319.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$pthread_getspecific (29 samples, 0.02%)</title><rect x="20.0790%" y="293" width="0.0167%" height="15" fill="rgb(226,22,26)"/><text x="20.3290%" y="303.50"></text></g><g><title>libsystem_c.dylib`__Balloc_D2A (458 samples, 0.26%)</title><rect x="20.0957%" y="293" width="0.2644%" height="15" fill="rgb(217,163,10)"/><text x="20.3457%" y="303.50"></text></g><g><title>libsystem_c.dylib`__lo0bits_D2A (498 samples, 0.29%)</title><rect x="20.3601%" y="293" width="0.2875%" height="15" fill="rgb(213,25,53)"/><text x="20.6101%" y="303.50"></text></g><g><title>libsystem_c.dylib`__d2b_D2A (1,846 samples, 1.07%)</title><rect x="19.6021%" y="309" width="1.0656%" height="15" fill="rgb(252,105,26)"/><text x="19.8521%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (35 samples, 0.02%)</title><rect x="20.6476%" y="293" width="0.0202%" height="15" fill="rgb(220,39,43)"/><text x="20.8976%" y="303.50"></text></g><g><title>libsystem_c.dylib`__hi0bits_D2A (212 samples, 0.12%)</title><rect x="20.6678%" y="309" width="0.1224%" height="15" fill="rgb(229,68,48)"/><text x="20.9178%" y="319.50"></text></g><g><title>libsystem_c.dylib`__increment_D2A (98 samples, 0.06%)</title><rect x="20.7902%" y="309" width="0.0566%" height="15" fill="rgb(252,8,32)"/><text x="21.0402%" y="319.50"></text></g><g><title>libsystem_c.dylib`__lo0bits_D2A (105 samples, 0.06%)</title><rect x="20.8467%" y="309" width="0.0606%" height="15" fill="rgb(223,20,43)"/><text x="21.0967%" y="319.50"></text></g><g><title>libsystem_c.dylib`__rshift_D2A (657 samples, 0.38%)</title><rect x="20.9073%" y="309" width="0.3793%" height="15" fill="rgb(229,81,49)"/><text x="21.1573%" y="319.50"></text></g><g><title>libsystem_c.dylib`__rvOK_D2A (5,178 samples, 2.99%)</title><rect x="18.3316%" y="325" width="2.9891%" height="15" fill="rgb(236,28,36)"/><text x="18.5816%" y="335.50">lib..</text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (59 samples, 0.03%)</title><rect x="21.2866%" y="309" width="0.0341%" height="15" fill="rgb(249,185,26)"/><text x="21.5366%" y="319.50"></text></g><g><title>libsystem_c.dylib`localeconv_l (162 samples, 0.09%)</title><rect x="21.3207%" y="325" width="0.0935%" height="15" fill="rgb(249,174,33)"/><text x="21.5707%" y="335.50"></text></g><g><title>libsystem_c.dylib`__strtodg (11,901 samples, 6.87%)</title><rect x="14.6377%" y="341" width="6.8700%" height="15" fill="rgb(233,201,37)"/><text x="14.8877%" y="351.50">libsystem..</text></g><g><title>libsystem_platform.dylib`_platform_strlen (162 samples, 0.09%)</title><rect x="21.4142%" y="325" width="0.0935%" height="15" fill="rgb(221,78,26)"/><text x="21.6642%" y="335.50"></text></g><g><title>libsystem_c.dylib`localeconv_l (28 samples, 0.02%)</title><rect x="21.5077%" y="341" width="0.0162%" height="15" fill="rgb(250,127,30)"/><text x="21.7577%" y="351.50"></text></g><g><title>libc++.1.dylib`float std::__1::__num_get_float&lt;float&gt; (13,779 samples, 7.95%)</title><rect x="13.5986%" y="373" width="7.9541%" height="15" fill="rgb(230,49,44)"/><text x="13.8486%" y="383.50">libc++.1.dy..</text></g><g><title>libsystem_c.dylib`strtof_l (13,107 samples, 7.57%)</title><rect x="13.9865%" y="357" width="7.5662%" height="15" fill="rgb(229,67,23)"/><text x="14.2365%" y="367.50">libsystem_..</text></g><g><title>libsystem_platform.dylib`_platform_strlen (49 samples, 0.03%)</title><rect x="21.5244%" y="341" width="0.0283%" height="15" fill="rgb(249,83,47)"/><text x="21.7744%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::__check_grouping(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (52 samples, 0.03%)</title><rect x="21.5527%" y="373" width="0.0300%" height="15" fill="rgb(215,43,3)"/><text x="21.8027%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::__num_get&lt;char&gt;::__stage2_float_loop(char, bool&amp;, char&amp;, char*, char*&amp;, char, char, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (13,024 samples, 7.52%)</title><rect x="21.5827%" y="373" width="7.5183%" height="15" fill="rgb(238,154,13)"/><text x="21.8327%" y="383.50">libc++.1.d..</text></g><g><title>libc+ (25 samples, 0.01%)</title><rect x="29.4087%" y="357" width="0.0144%" height="15" fill="rgb(219,56,2)"/><text x="29.6587%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__add_shared (23 samples, 0.01%)</title><rect x="29.4231%" y="357" width="0.0133%" height="15" fill="rgb(233,0,4)"/><text x="29.6731%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (49 samples, 0.03%)</title><rect x="29.4364%" y="357" width="0.0283%" height="15" fill="rgb(235,30,7)"/><text x="29.6864%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::ctype&lt;char&gt;::do_widen (1,235 samples, 0.71%)</title><rect x="29.4647%" y="357" width="0.7129%" height="15" fill="rgb(250,79,13)"/><text x="29.7147%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__add_shared (938 samples, 0.54%)</title><rect x="30.2388%" y="341" width="0.5415%" height="15" fill="rgb(211,146,34)"/><text x="30.4888%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::ios_base::getloc (1,102 samples, 0.64%)</title><rect x="30.1776%" y="357" width="0.6361%" height="15" fill="rgb(228,22,38)"/><text x="30.4276%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::locale (58 samples, 0.03%)</title><rect x="30.7803%" y="341" width="0.0335%" height="15" fill="rgb(235,168,5)"/><text x="31.0303%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::id::__get (260 samples, 0.15%)</title><rect x="30.8138%" y="357" width="0.1501%" height="15" fill="rgb(221,155,16)"/><text x="31.0638%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::locale (19 samples, 0.01%)</title><rect x="30.9639%" y="357" width="0.0110%" height="15" fill="rgb(215,215,53)"/><text x="31.2139%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::numpunct&lt;char&gt;::do_decimal_point (26 samples, 0.02%)</title><rect x="30.9748%" y="357" width="0.0150%" height="15" fill="rgb(223,4,10)"/><text x="31.2248%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::numpunct&lt;char&gt;::do_grouping (373 samples, 0.22%)</title><rect x="30.9898%" y="357" width="0.2153%" height="15" fill="rgb(234,103,6)"/><text x="31.2398%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (271 samples, 0.16%)</title><rect x="31.0487%" y="341" width="0.1564%" height="15" fill="rgb(227,97,0)"/><text x="31.2987%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::__num_get&lt;char&gt;::__stage2_float_prep (3,679 samples, 2.12%)</title><rect x="29.1010%" y="373" width="2.1238%" height="15" fill="rgb(234,150,53)"/><text x="29.3510%" y="383.50">l..</text></g><g><title>libc++.1.dylib`std::__1::numpunct&lt;char&gt;::do_thousands_sep (34 samples, 0.02%)</title><rect x="31.2052%" y="357" width="0.0196%" height="15" fill="rgb(228,201,54)"/><text x="31.4552%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__release_shared (785 samples, 0.45%)</title><rect x="31.2248%" y="373" width="0.4532%" height="15" fill="rgb(222,22,37)"/><text x="31.4748%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (238 samples, 0.14%)</title><rect x="31.9042%" y="341" width="0.1374%" height="15" fill="rgb(237,53,32)"/><text x="32.1542%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append (625 samples, 0.36%)</title><rect x="31.7056%" y="357" width="0.3608%" height="15" fill="rgb(233,25,53)"/><text x="31.9556%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (43 samples, 0.02%)</title><rect x="32.0416%" y="341" width="0.0248%" height="15" fill="rgb(210,40,34)"/><text x="32.2916%" y="351.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (32 samples, 0.02%)</title><rect x="32.0664%" y="357" width="0.0185%" height="15" fill="rgb(241,220,44)"/><text x="32.3164%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize (756 samples, 0.44%)</title><rect x="31.6808%" y="373" width="0.4364%" height="15" fill="rgb(235,28,35)"/><text x="31.9308%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (55 samples, 0.03%)</title><rect x="32.0855%" y="357" width="0.0317%" height="15" fill="rgb(210,56,17)"/><text x="32.3355%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::ios_base::getloc (28 samples, 0.02%)</title><rect x="32.1207%" y="373" width="0.0162%" height="15" fill="rgb(224,130,29)"/><text x="32.3707%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::__imp::use_facet (136 samples, 0.08%)</title><rect x="32.1369%" y="373" width="0.0785%" height="15" fill="rgb(235,212,8)"/><text x="32.3869%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::id::__get (28 samples, 0.02%)</title><rect x="32.2154%" y="373" width="0.0162%" height="15" fill="rgb(223,33,50)"/><text x="32.4654%" y="383.50"></text></g><g><title>libsystem_c.dylib`strtof_l (52 samples, 0.03%)</title><rect x="32.2413%" y="373" width="0.0300%" height="15" fill="rgb(219,149,13)"/><text x="32.4913%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; std::__1::num_get&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt;::__do_get_floating_point&lt;float&gt;(std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt;, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits (39,693 samples, 22.91%)</title><rect x="9.5243%" y="389" width="22.9133%" height="15" fill="rgb(250,156,29)"/><text x="9.7743%" y="399.50">libc++.1.dylib`std::__1::istreambuf_..</text></g><g><title>libsystem_kernel.dylib`__error (288 samples, 0.17%)</title><rect x="32.2714%" y="373" width="0.1663%" height="15" fill="rgb(216,193,19)"/><text x="32.5214%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::__imp::use_facet (68 samples, 0.04%)</title><rect x="32.4376%" y="389" width="0.0393%" height="15" fill="rgb(216,135,14)"/><text x="32.6876%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::locale (36 samples, 0.02%)</title><rect x="32.4769%" y="389" width="0.0208%" height="15" fill="rgb(241,47,5)"/><text x="32.7269%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::use_facet (233 samples, 0.13%)</title><rect x="32.4976%" y="389" width="0.1345%" height="15" fill="rgb(233,42,35)"/><text x="32.7476%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::id::__get (118 samples, 0.07%)</title><rect x="32.5640%" y="373" width="0.0681%" height="15" fill="rgb(231,13,6)"/><text x="32.8140%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::~locale (35 samples, 0.02%)</title><rect x="32.6322%" y="389" width="0.0202%" height="15" fill="rgb(207,181,40)"/><text x="32.8822%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::operator&gt;&gt; (44,314 samples, 25.58%)</title><rect x="7.0842%" y="405" width="25.5809%" height="15" fill="rgb(254,173,49)"/><text x="7.3342%" y="415.50">libc++.1.dylib`std::__1::basic_istream&lt;ch..</text></g><g><title>libc++.1.dylib`std::__1::num_get&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt;::do_get(std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt;, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits (22 samples, 0.01%)</title><rect x="32.6524%" y="389" width="0.0127%" height="15" fill="rgb(221,1,38)"/><text x="32.9024%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sentry::sentry(std::__1::basic_istream&lt;char, std::__1::char_traits (29 samples, 0.02%)</title><rect x="32.6651%" y="405" width="0.0167%" height="15" fill="rgb(206,124,46)"/><text x="32.9151%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (26 samples, 0.02%)</title><rect x="32.6887%" y="405" width="0.0150%" height="15" fill="rgb(249,21,11)"/><text x="32.9387%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; std::__1::num_get&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt;::__do_get_floating_point&lt;float&gt;(std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt;, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits (38 samples, 0.02%)</title><rect x="32.7262%" y="405" width="0.0219%" height="15" fill="rgb(222,201,40)"/><text x="32.9762%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::__imp::use_facet (65 samples, 0.04%)</title><rect x="32.7488%" y="405" width="0.0375%" height="15" fill="rgb(235,61,29)"/><text x="32.9988%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::use_facet (23 samples, 0.01%)</title><rect x="32.7955%" y="405" width="0.0133%" height="15" fill="rgb(219,207,3)"/><text x="33.0455%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (36 samples, 0.02%)</title><rect x="32.8232%" y="405" width="0.0208%" height="15" fill="rgb(222,56,46)"/><text x="33.0732%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (202 samples, 0.12%)</title><rect x="32.8440%" y="405" width="0.1166%" height="15" fill="rgb(239,76,54)"/><text x="33.0940%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (114 samples, 0.07%)</title><rect x="32.8948%" y="389" width="0.0658%" height="15" fill="rgb(231,124,27)"/><text x="33.1448%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (22 samples, 0.01%)</title><rect x="33.0651%" y="389" width="0.0127%" height="15" fill="rgb(249,195,6)"/><text x="33.3151%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (22 samples, 0.01%)</title><rect x="33.1921%" y="373" width="0.0127%" height="15" fill="rgb(237,174,47)"/><text x="33.4421%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (462 samples, 0.27%)</title><rect x="32.9693%" y="405" width="0.2667%" height="15" fill="rgb(206,201,31)"/><text x="33.2193%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (273 samples, 0.16%)</title><rect x="33.0784%" y="389" width="0.1576%" height="15" fill="rgb(231,57,52)"/><text x="33.3284%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (45 samples, 0.03%)</title><rect x="33.2100%" y="373" width="0.0260%" height="15" fill="rgb(248,177,22)"/><text x="33.4600%" y="383.50"></text></g><g><title>GloveExample`Dataset::read_glove(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (57,588 samples, 33.24%)</title><rect x="0.0098%" y="421" width="33.2435%" height="15" fill="rgb(215,211,37)"/><text x="0.2598%" y="431.50">GloveExample`Dataset::read_glove(std::__1::basic_strin..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (59 samples, 0.03%)</title><rect x="35.0018%" y="325" width="0.0341%" height="15" fill="rgb(241,128,51)"/><text x="35.2518%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (53 samples, 0.03%)</title><rect x="35.0053%" y="309" width="0.0306%" height="15" fill="rgb(227,165,31)"/><text x="35.2553%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`malloc (82 samples, 0.05%)</title><rect x="34.9897%" y="357" width="0.0473%" height="15" fill="rgb(228,167,24)"/><text x="35.2397%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (74 samples, 0.04%)</title><rect x="34.9943%" y="341" width="0.0427%" height="15" fill="rgb(228,143,12)"/><text x="35.2443%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (84 samples, 0.05%)</title><rect x="34.9891%" y="373" width="0.0485%" height="15" fill="rgb(249,149,8)"/><text x="35.2391%" y="383.50"></text></g><g><title>GloveExample`puffinn::IndependentHashSource&lt;puffinn::SimHash&gt;::reset (101 samples, 0.06%)</title><rect x="34.9885%" y="389" width="0.0583%" height="15" fill="rgb(243,35,44)"/><text x="35.2385%" y="399.50"></text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::SimHash&gt;::operator() (57,008 samples, 32.91%)</title><rect x="35.0468%" y="389" width="32.9087%" height="15" fill="rgb(246,89,9)"/><text x="35.2968%" y="399.50">GloveExample`puffinn::IndependentHasher&lt;puffinn::SimH..</text></g><g><title>libsystem_malloc.dylib`free (100 samples, 0.06%)</title><rect x="67.9567%" y="389" width="0.0577%" height="15" fill="rgb(233,213,13)"/><text x="68.2067%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (31 samples, 0.02%)</title><rect x="67.9965%" y="373" width="0.0179%" height="15" fill="rgb(233,141,41)"/><text x="68.2465%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 0.01%)</title><rect x="68.0144%" y="389" width="0.0144%" height="15" fill="rgb(239,167,4)"/><text x="68.2644%" y="399.50"></text></g><g><title>GloveExample`puffinn::Filterer&lt;puffinn::SimHash&gt;::add_sketches(puffinn::Dataset (57,930 samples, 33.44%)</title><rect x="34.6029%" y="405" width="33.4409%" height="15" fill="rgb(209,217,16)"/><text x="34.8529%" y="415.50">GloveExample`puffinn::Filterer&lt;puffinn::SimHash&gt;::add_..</text></g><g><title>libsystem_malloc.dylib`szone_size (26 samples, 0.02%)</title><rect x="68.0288%" y="389" width="0.0150%" height="15" fill="rgb(219,88,35)"/><text x="68.2788%" y="399.50"></text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::SimHash&gt;::operator() (177 samples, 0.10%)</title><rect x="68.0467%" y="405" width="0.1022%" height="15" fill="rgb(220,193,23)"/><text x="68.2967%" y="415.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (26 samples, 0.02%)</title><rect x="72.7439%" y="325" width="0.0150%" height="15" fill="rgb(230,90,52)"/><text x="72.9939%" y="335.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (79 samples, 0.05%)</title><rect x="73.7963%" y="309" width="0.0456%" height="15" fill="rgb(252,106,19)"/><text x="74.0463%" y="319.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort5&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (32 samples, 0.02%)</title><rect x="73.8419%" y="309" width="0.0185%" height="15" fill="rgb(206,74,20)"/><text x="74.0919%" y="319.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (139 samples, 0.08%)</title><rect x="74.8099%" y="293" width="0.0802%" height="15" fill="rgb(230,138,44)"/><text x="75.0599%" y="303.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort5&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (51 samples, 0.03%)</title><rect x="74.8902%" y="293" width="0.0294%" height="15" fill="rgb(235,182,43)"/><text x="75.1402%" y="303.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (154 samples, 0.09%)</title><rect x="75.7261%" y="277" width="0.0889%" height="15" fill="rgb(242,16,51)"/><text x="75.9761%" y="287.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort5&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (62 samples, 0.04%)</title><rect x="75.8150%" y="277" width="0.0358%" height="15" fill="rgb(248,9,4)"/><text x="76.0650%" y="287.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (129 samples, 0.07%)</title><rect x="76.3766%" y="261" width="0.0745%" height="15" fill="rgb(210,31,22)"/><text x="76.6266%" y="271.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort5&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (37 samples, 0.02%)</title><rect x="76.4511%" y="261" width="0.0214%" height="15" fill="rgb(239,54,39)"/><text x="76.7011%" y="271.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (84 samples, 0.05%)</title><rect x="76.7316%" y="245" width="0.0485%" height="15" fill="rgb(230,99,41)"/><text x="76.9816%" y="255.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort5&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (20 samples, 0.01%)</title><rect x="76.7801%" y="245" width="0.0115%" height="15" fill="rgb(253,106,12)"/><text x="77.0301%" y="255.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (23 samples, 0.01%)</title><rect x="76.8765%" y="229" width="0.0133%" height="15" fill="rgb(213,46,41)"/><text x="77.1265%" y="239.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (14,106 samples, 8.14%)</title><rect x="68.7810%" y="389" width="8.1429%" height="15" fill="rgb(215,133,35)"/><text x="69.0310%" y="399.50">GloveExampl..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (12,406 samples, 7.16%)</title><rect x="69.7623%" y="373" width="7.1615%" height="15" fill="rgb(213,28,5)"/><text x="70.0123%" y="383.50">GloveExamp..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (10,634 samples, 6.14%)</title><rect x="70.7853%" y="357" width="6.1386%" height="15" fill="rgb(215,77,49)"/><text x="71.0353%" y="367.50">GloveExa..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (8,937 samples, 5.16%)</title><rect x="71.7649%" y="341" width="5.1590%" height="15" fill="rgb(248,100,22)"/><text x="72.0149%" y="351.50">GloveE..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (7,202 samples, 4.16%)</title><rect x="72.7664%" y="325" width="4.1575%" height="15" fill="rgb(208,67,9)"/><text x="73.0164%" y="335.50">Glove..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (5,307 samples, 3.06%)</title><rect x="73.8603%" y="309" width="3.0635%" height="15" fill="rgb(219,133,21)"/><text x="74.1103%" y="319.50">Glo..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (3,472 samples, 2.00%)</title><rect x="74.9196%" y="293" width="2.0043%" height="15" fill="rgb(246,46,29)"/><text x="75.1696%" y="303.50">G..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (1,859 samples, 1.07%)</title><rect x="75.8507%" y="277" width="1.0731%" height="15" fill="rgb(246,185,52)"/><text x="76.1007%" y="287.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (782 samples, 0.45%)</title><rect x="76.4725%" y="261" width="0.4514%" height="15" fill="rgb(252,136,11)"/><text x="76.7225%" y="271.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (229 samples, 0.13%)</title><rect x="76.7917%" y="245" width="0.1322%" height="15" fill="rgb(219,138,53)"/><text x="77.0417%" y="255.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (53 samples, 0.03%)</title><rect x="76.8933%" y="229" width="0.0306%" height="15" fill="rgb(211,51,23)"/><text x="77.1433%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (218 samples, 0.13%)</title><rect x="76.9245%" y="389" width="0.1258%" height="15" fill="rgb(247,221,28)"/><text x="77.1745%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (88 samples, 0.05%)</title><rect x="77.0503%" y="357" width="0.0508%" height="15" fill="rgb(251,222,45)"/><text x="77.3003%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_large (89 samples, 0.05%)</title><rect x="77.0503%" y="389" width="0.0514%" height="15" fill="rgb(217,162,53)"/><text x="77.3003%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (89 samples, 0.05%)</title><rect x="77.0503%" y="373" width="0.0514%" height="15" fill="rgb(229,93,14)"/><text x="77.3003%" y="383.50"></text></g><g><title>GloveExample`puffinn::PrefixMap&lt;puffinn::SimHash&gt;::rebuild (17,168 samples, 9.91%)</title><rect x="68.1512%" y="405" width="9.9105%" height="15" fill="rgb(209,67,49)"/><text x="68.4012%" y="415.50">GloveExample`p..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,663 samples, 0.96%)</title><rect x="77.1017%" y="389" width="0.9600%" height="15" fill="rgb(213,87,29)"/><text x="77.3517%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (24 samples, 0.01%)</title><rect x="78.1038%" y="293" width="0.0139%" height="15" fill="rgb(205,151,52)"/><text x="78.3538%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (197 samples, 0.11%)</title><rect x="78.0830%" y="325" width="0.1137%" height="15" fill="rgb(253,215,39)"/><text x="78.3330%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (194 samples, 0.11%)</title><rect x="78.0848%" y="309" width="0.1120%" height="15" fill="rgb(221,220,41)"/><text x="78.3348%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (135 samples, 0.08%)</title><rect x="78.1188%" y="293" width="0.0779%" height="15" fill="rgb(218,133,21)"/><text x="78.3688%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (201 samples, 0.12%)</title><rect x="78.0813%" y="341" width="0.1160%" height="15" fill="rgb(221,193,43)"/><text x="78.3313%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (205 samples, 0.12%)</title><rect x="78.0796%" y="373" width="0.1183%" height="15" fill="rgb(240,128,52)"/><text x="78.3296%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`malloc (202 samples, 0.12%)</title><rect x="78.0813%" y="357" width="0.1166%" height="15" fill="rgb(253,114,12)"/><text x="78.3313%" y="367.50"></text></g><g><title>GloveExample`std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt; &gt;::__append (258 samples, 0.15%)</title><rect x="78.0755%" y="389" width="0.1489%" height="15" fill="rgb(215,223,47)"/><text x="78.3255%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (46 samples, 0.03%)</title><rect x="78.1979%" y="373" width="0.0266%" height="15" fill="rgb(248,225,23)"/><text x="78.4479%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (71 samples, 0.04%)</title><rect x="78.2441%" y="341" width="0.0410%" height="15" fill="rgb(250,108,0)"/><text x="78.4941%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (68 samples, 0.04%)</title><rect x="78.2458%" y="325" width="0.0393%" height="15" fill="rgb(228,208,7)"/><text x="78.4958%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (95 samples, 0.05%)</title><rect x="78.2308%" y="357" width="0.0548%" height="15" fill="rgb(244,45,10)"/><text x="78.4808%" y="367.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (107 samples, 0.06%)</title><rect x="78.2250%" y="389" width="0.0618%" height="15" fill="rgb(207,125,25)"/><text x="78.4750%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`malloc (103 samples, 0.06%)</title><rect x="78.2273%" y="373" width="0.0595%" height="15" fill="rgb(210,195,18)"/><text x="78.4773%" y="383.50"></text></g><g><title>libomp.dylib`__kmp_allocate_team (21 samples, 0.01%)</title><rect x="78.3549%" y="357" width="0.0121%" height="15" fill="rgb(249,80,12)"/><text x="78.6049%" y="367.50"></text></g><g><title>libomp.dylib`__kmp_hyper_barrier_release(barrier_type, kmp_info*, int, int, int, void*) (86 samples, 0.05%)</title><rect x="78.3751%" y="341" width="0.0496%" height="15" fill="rgb(221,65,9)"/><text x="78.6251%" y="351.50"></text></g><g><title>libomp.dylib`kmp_flag_64::release (66 samples, 0.04%)</title><rect x="78.3867%" y="325" width="0.0381%" height="15" fill="rgb(235,49,36)"/><text x="78.6367%" y="335.50"></text></g><g><title>libomp.dylib`__kmp_fork_barrier(int, int) (115 samples, 0.07%)</title><rect x="78.3670%" y="357" width="0.0664%" height="15" fill="rgb(225,32,20)"/><text x="78.6170%" y="367.50"></text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::SimHash&gt;::operator() (2,461 samples, 1.42%)</title><rect x="78.6297%" y="309" width="1.4206%" height="15" fill="rgb(215,141,46)"/><text x="78.8797%" y="319.50"></text></g><g><title>GloveExample`.omp_outlined. (2,815 samples, 1.62%)</title><rect x="78.4617%" y="325" width="1.6250%" height="15" fill="rgb(250,160,47)"/><text x="78.7117%" y="335.50"></text></g><g><title>libomp.dylib`__kmpc_for_static_init_4u (47 samples, 0.03%)</title><rect x="80.0596%" y="309" width="0.0271%" height="15" fill="rgb(216,222,40)"/><text x="80.3096%" y="319.50"></text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::SimHash&gt;::operator() (22 samples, 0.01%)</title><rect x="80.0890%" y="325" width="0.0127%" height="15" fill="rgb(234,217,39)"/><text x="80.3390%" y="335.50"></text></g><g><title>libomp.dylib`__kmp_invoke_task_func (2,897 samples, 1.67%)</title><rect x="78.4444%" y="357" width="1.6723%" height="15" fill="rgb(207,178,40)"/><text x="78.6944%" y="367.50"></text></g><g><title>libomp.dylib`__kmp_invoke_microtask (2,870 samples, 1.66%)</title><rect x="78.4600%" y="341" width="1.6567%" height="15" fill="rgb(221,136,13)"/><text x="78.7100%" y="351.50"></text></g><g><title>libomp.dylib`__kmp_fork_call (3,135 samples, 1.81%)</title><rect x="78.3099%" y="373" width="1.8097%" height="15" fill="rgb(249,199,10)"/><text x="78.5599%" y="383.50">l..</text></g><g><title>libomp.dylib`__kmp_free_team (19 samples, 0.01%)</title><rect x="80.1906%" y="357" width="0.0110%" height="15" fill="rgb(249,222,13)"/><text x="80.4406%" y="367.50"></text></g><g><title>libomp.dylib`__kmp_hardware_timestamp (258 samples, 0.15%)</title><rect x="80.2403%" y="309" width="0.1489%" height="15" fill="rgb(244,185,38)"/><text x="80.4903%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (92 samples, 0.05%)</title><rect x="81.5986%" y="293" width="0.0531%" height="15" fill="rgb(236,202,9)"/><text x="81.8486%" y="303.50"></text></g><g><title>libomp.dylib`kmp_flag_64::wait (2,188 samples, 1.26%)</title><rect x="80.3892%" y="309" width="1.2631%" height="15" fill="rgb(250,229,37)"/><text x="80.6392%" y="319.50"></text></g><g><title>libomp.dylib`__kmp_hyper_barrier_gather(barrier_type, kmp_info*, int, int, void (*)(void*, void*), void*) (2,486 samples, 1.44%)</title><rect x="80.2177%" y="325" width="1.4351%" height="15" fill="rgb(206,174,23)"/><text x="80.4677%" y="335.50"></text></g><g><title>libomp.dylib`__kmp_join_call (2,645 samples, 1.53%)</title><rect x="80.1294%" y="373" width="1.5269%" height="15" fill="rgb(211,33,43)"/><text x="80.3794%" y="383.50"></text></g><g><title>libomp.dylib`__kmp_internal_join (2,520 samples, 1.45%)</title><rect x="80.2016%" y="357" width="1.4547%" height="15" fill="rgb(245,58,50)"/><text x="80.4516%" y="367.50"></text></g><g><title>libomp.dylib`__kmp_join_barrier(int) (2,512 samples, 1.45%)</title><rect x="80.2062%" y="341" width="1.4501%" height="15" fill="rgb(244,68,36)"/><text x="80.4562%" y="351.50"></text></g><g><title>libomp.dylib`__kmp_release_ticket_lock (86 samples, 0.05%)</title><rect x="81.6569%" y="373" width="0.0496%" height="15" fill="rgb(232,229,15)"/><text x="81.9069%" y="383.50"></text></g><g><title>libomp.dylib`__kmpc_fork_call (5,924 samples, 3.42%)</title><rect x="78.2885%" y="389" width="3.4197%" height="15" fill="rgb(254,30,23)"/><text x="78.5385%" y="399.50">lib..</text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.01%)</title><rect x="81.7111%" y="389" width="0.0115%" height="15" fill="rgb(235,160,14)"/><text x="81.9611%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.01%)</title><rect x="81.7227%" y="389" width="0.0121%" height="15" fill="rgb(212,155,44)"/><text x="81.9727%" y="399.50"></text></g><g><title>GloveExample`puffinn::TensoredHashSource&lt;puffinn::SimHash&gt;::reset (6,368 samples, 3.68%)</title><rect x="78.0628%" y="405" width="3.6760%" height="15" fill="rgb(226,2,50)"/><text x="78.3128%" y="415.50">Glov..</text></g><g><title>GloveExample`puffinn::TensoredHasher&lt;puffinn::SimHash&gt;::operator() (175 samples, 0.10%)</title><rect x="81.7388%" y="405" width="0.1010%" height="15" fill="rgb(234,177,6)"/><text x="81.9888%" y="415.50"></text></g><g><title>libc+ (31 samples, 0.02%)</title><rect x="81.8399%" y="405" width="0.0179%" height="15" fill="rgb(217,24,9)"/><text x="82.0899%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 0.03%)</title><rect x="81.8641%" y="405" width="0.0271%" height="15" fill="rgb(220,13,46)"/><text x="82.1141%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (19 samples, 0.01%)</title><rect x="81.8803%" y="389" width="0.0110%" height="15" fill="rgb(239,221,27)"/><text x="82.1303%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (50 samples, 0.03%)</title><rect x="81.8912%" y="405" width="0.0289%" height="15" fill="rgb(222,198,25)"/><text x="82.1412%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (25 samples, 0.01%)</title><rect x="81.9057%" y="389" width="0.0144%" height="15" fill="rgb(211,99,13)"/><text x="82.1557%" y="399.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::SimHash, puffinn::SimHash&gt;::rebuild (84,308 samples, 48.67%)</title><rect x="33.2556%" y="421" width="48.6680%" height="15" fill="rgb(232,111,31)"/><text x="33.5056%" y="431.50">GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::SimHash, puffinn..</text></g><g><title>libsystem_kernel.dylib`madvise (96 samples, 0.06%)</title><rect x="81.9241%" y="389" width="0.0554%" height="15" fill="rgb(245,82,37)"/><text x="82.1741%" y="399.50"></text></g><g><title>GloveExample`std::__1::__vector_base&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt;, std::__1::allocator&lt;puffinn::PrefixMap&lt;puffinn::SimHash&gt; &gt; &gt;::~__vector_base (201 samples, 0.12%)</title><rect x="81.9241%" y="405" width="0.1160%" height="15" fill="rgb(227,149,46)"/><text x="82.1741%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_large (105 samples, 0.06%)</title><rect x="81.9796%" y="389" width="0.0606%" height="15" fill="rgb(218,36,50)"/><text x="82.2296%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (105 samples, 0.06%)</title><rect x="81.9796%" y="373" width="0.0606%" height="15" fill="rgb(226,80,48)"/><text x="82.2296%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (105 samples, 0.06%)</title><rect x="81.9796%" y="357" width="0.0606%" height="15" fill="rgb(238,224,15)"/><text x="82.2296%" y="367.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::SimHash, puffinn::SimHash&gt;::~Index (249 samples, 0.14%)</title><rect x="81.9236%" y="421" width="0.1437%" height="15" fill="rgb(241,136,10)"/><text x="82.1736%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_large (47 samples, 0.03%)</title><rect x="82.0402%" y="405" width="0.0271%" height="15" fill="rgb(208,32,45)"/><text x="82.2902%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (47 samples, 0.03%)</title><rect x="82.0402%" y="389" width="0.0271%" height="15" fill="rgb(207,135,9)"/><text x="82.2902%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (47 samples, 0.03%)</title><rect x="82.0402%" y="373" width="0.0271%" height="15" fill="rgb(206,86,44)"/><text x="82.2902%" y="383.50"></text></g><g><title>GloveExample`puffinn::TensoredHasher&lt;puffinn::SimHash&gt;::operator() (111 samples, 0.06%)</title><rect x="82.0690%" y="421" width="0.0641%" height="15" fill="rgb(245,177,15)"/><text x="82.3190%" y="431.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (26 samples, 0.02%)</title><rect x="82.2122%" y="69" width="0.0150%" height="15" fill="rgb(206,64,50)"/><text x="82.4622%" y="79.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (49 samples, 0.03%)</title><rect x="82.2053%" y="85" width="0.0283%" height="15" fill="rgb(234,36,40)"/><text x="82.4553%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (26 samples, 0.02%)</title><rect x="82.2382%" y="85" width="0.0150%" height="15" fill="rgb(213,64,8)"/><text x="82.4882%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (21 samples, 0.01%)</title><rect x="82.2411%" y="69" width="0.0121%" height="15" fill="rgb(210,75,36)"/><text x="82.4911%" y="79.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (113 samples, 0.07%)</title><rect x="82.1885%" y="101" width="0.0652%" height="15" fill="rgb(229,88,21)"/><text x="82.4385%" y="111.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (189 samples, 0.11%)</title><rect x="82.1718%" y="117" width="0.1091%" height="15" fill="rgb(252,204,47)"/><text x="82.4218%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (39 samples, 0.02%)</title><rect x="82.2584%" y="101" width="0.0225%" height="15" fill="rgb(208,77,27)"/><text x="82.5084%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (32 samples, 0.02%)</title><rect x="82.2624%" y="85" width="0.0185%" height="15" fill="rgb(221,76,26)"/><text x="82.5124%" y="95.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (299 samples, 0.17%)</title><rect x="82.1458%" y="133" width="0.1726%" height="15" fill="rgb(225,139,18)"/><text x="82.3958%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (51 samples, 0.03%)</title><rect x="82.2890%" y="117" width="0.0294%" height="15" fill="rgb(230,137,11)"/><text x="82.5390%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (43 samples, 0.02%)</title><rect x="82.2936%" y="101" width="0.0248%" height="15" fill="rgb(212,28,1)"/><text x="82.5436%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (34 samples, 0.02%)</title><rect x="82.3242%" y="133" width="0.0196%" height="15" fill="rgb(248,164,17)"/><text x="82.5742%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (28 samples, 0.02%)</title><rect x="82.3276%" y="117" width="0.0162%" height="15" fill="rgb(222,171,42)"/><text x="82.5776%" y="127.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (354 samples, 0.20%)</title><rect x="82.1400%" y="149" width="0.2044%" height="15" fill="rgb(243,84,45)"/><text x="82.3900%" y="159.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (378 samples, 0.22%)</title><rect x="82.1371%" y="165" width="0.2182%" height="15" fill="rgb(252,49,23)"/><text x="82.3871%" y="175.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (390 samples, 0.23%)</title><rect x="82.1366%" y="181" width="0.2251%" height="15" fill="rgb(215,19,7)"/><text x="82.3866%" y="191.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (393 samples, 0.23%)</title><rect x="82.1354%" y="197" width="0.2269%" height="15" fill="rgb(238,81,41)"/><text x="82.3854%" y="207.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (395 samples, 0.23%)</title><rect x="82.1348%" y="213" width="0.2280%" height="15" fill="rgb(210,199,37)"/><text x="82.3848%" y="223.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (399 samples, 0.23%)</title><rect x="82.1337%" y="293" width="0.2303%" height="15" fill="rgb(244,192,49)"/><text x="82.3837%" y="303.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (399 samples, 0.23%)</title><rect x="82.1337%" y="277" width="0.2303%" height="15" fill="rgb(226,211,11)"/><text x="82.3837%" y="287.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (398 samples, 0.23%)</title><rect x="82.1343%" y="261" width="0.2298%" height="15" fill="rgb(236,162,54)"/><text x="82.3843%" y="271.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (398 samples, 0.23%)</title><rect x="82.1343%" y="245" width="0.2298%" height="15" fill="rgb(220,229,9)"/><text x="82.3843%" y="255.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (397 samples, 0.23%)</title><rect x="82.1348%" y="229" width="0.2292%" height="15" fill="rgb(250,87,22)"/><text x="82.3848%" y="239.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (400 samples, 0.23%)</title><rect x="82.1337%" y="405" width="0.2309%" height="15" fill="rgb(239,43,17)"/><text x="82.3837%" y="415.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (400 samples, 0.23%)</title><rect x="82.1337%" y="389" width="0.2309%" height="15" fill="rgb(231,177,25)"/><text x="82.3837%" y="399.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (400 samples, 0.23%)</title><rect x="82.1337%" y="373" width="0.2309%" height="15" fill="rgb(219,179,1)"/><text x="82.3837%" y="383.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (400 samples, 0.23%)</title><rect x="82.1337%" y="357" width="0.2309%" height="15" fill="rgb(238,219,53)"/><text x="82.3837%" y="367.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (400 samples, 0.23%)</title><rect x="82.1337%" y="341" width="0.2309%" height="15" fill="rgb(232,167,36)"/><text x="82.3837%" y="351.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (400 samples, 0.23%)</title><rect x="82.1337%" y="325" width="0.2309%" height="15" fill="rgb(244,19,51)"/><text x="82.3837%" y="335.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (400 samples, 0.23%)</title><rect x="82.1337%" y="309" width="0.2309%" height="15" fill="rgb(224,6,22)"/><text x="82.3837%" y="319.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (401 samples, 0.23%)</title><rect x="82.1337%" y="421" width="0.2315%" height="15" fill="rgb(224,145,5)"/><text x="82.3837%" y="431.50"></text></g><g><title>GloveExample`std::__1::__tree_node_base&lt;void*&gt;*&amp; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::__find_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;(std::__1::__tree_end_node&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;*&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (1,467 samples, 0.85%)</title><rect x="82.3744%" y="405" width="0.8468%" height="15" fill="rgb(234,130,49)"/><text x="82.6244%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (170 samples, 0.10%)</title><rect x="83.1231%" y="389" width="0.0981%" height="15" fill="rgb(254,6,2)"/><text x="83.3731%" y="399.50"></text></g><g><title>GloveExample`std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator (1,529 samples, 0.88%)</title><rect x="82.3657%" y="421" width="0.8826%" height="15" fill="rgb(208,96,46)"/><text x="82.6157%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (47 samples, 0.03%)</title><rect x="83.2212%" y="405" width="0.0271%" height="15" fill="rgb(239,3,39)"/><text x="83.4712%" y="415.50"></text></g><g><title>GloveExample`std::__1::vector&lt;unsigned int, std::__1::allocator&lt;unsigned int&gt; &gt; puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::SimHash, puffinn::SimHash&gt;::search&lt;std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;(std::__1::vector&lt;float, std::__1::allocator (391 samples, 0.23%)</title><rect x="83.2484%" y="421" width="0.2257%" height="15" fill="rgb(233,210,1)"/><text x="83.4984%" y="431.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::SimHash, puffinn::SimHash&gt;::search_formatted_query (391 samples, 0.23%)</title><rect x="83.2484%" y="405" width="0.2257%" height="15" fill="rgb(244,137,37)"/><text x="83.4984%" y="415.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::SimHash, puffinn::SimHash&gt;::search_maps (390 samples, 0.23%)</title><rect x="83.2490%" y="389" width="0.2251%" height="15" fill="rgb(240,136,2)"/><text x="83.4990%" y="399.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (69 samples, 0.04%)</title><rect x="83.6519%" y="389" width="0.0398%" height="15" fill="rgb(239,18,37)"/><text x="83.9019%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`malloc (68 samples, 0.04%)</title><rect x="83.6525%" y="373" width="0.0393%" height="15" fill="rgb(218,185,22)"/><text x="83.9025%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (64 samples, 0.04%)</title><rect x="83.6548%" y="357" width="0.0369%" height="15" fill="rgb(225,218,4)"/><text x="83.9048%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (54 samples, 0.03%)</title><rect x="83.6605%" y="341" width="0.0312%" height="15" fill="rgb(230,182,32)"/><text x="83.9105%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (50 samples, 0.03%)</title><rect x="83.6629%" y="325" width="0.0289%" height="15" fill="rgb(242,56,43)"/><text x="83.9129%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.01%)</title><rect x="83.6923%" y="389" width="0.0115%" height="15" fill="rgb(233,99,24)"/><text x="83.9423%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (43 samples, 0.02%)</title><rect x="83.7038%" y="389" width="0.0248%" height="15" fill="rgb(234,209,42)"/><text x="83.9538%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (34 samples, 0.02%)</title><rect x="83.7090%" y="373" width="0.0196%" height="15" fill="rgb(227,7,12)"/><text x="83.9590%" y="383.50"></text></g><g><title>GloveExample`puffinn::UnitVectorFormat::store(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; const&amp;, short*, puffinn::DatasetDescription (423 samples, 0.24%)</title><rect x="83.5572%" y="405" width="0.2442%" height="15" fill="rgb(245,203,43)"/><text x="83.8072%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (120 samples, 0.07%)</title><rect x="83.7321%" y="389" width="0.0693%" height="15" fill="rgb(238,205,33)"/><text x="83.9821%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (512 samples, 0.30%)</title><rect x="83.8049%" y="405" width="0.2956%" height="15" fill="rgb(231,56,7)"/><text x="84.0549%" y="415.50"></text></g><g><title>GloveExample`void puffinn::Dataset&lt;puffinn::UnitVectorFormat&gt;::insert&lt;std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;(std::__1::vector&lt;float, std::__1::allocator (1,087 samples, 0.63%)</title><rect x="83.4741%" y="421" width="0.6275%" height="15" fill="rgb(244,186,29)"/><text x="83.7241%" y="431.50"></text></g><g><title>GloveExample`void std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt;::__push_back_slow_path&lt;float const&amp;&gt; (50 samples, 0.03%)</title><rect x="84.1016%" y="421" width="0.0289%" height="15" fill="rgb(234,111,31)"/><text x="84.3516%" y="431.50"></text></g><g><title>libc+ (46 samples, 0.03%)</title><rect x="84.1304%" y="421" width="0.0266%" height="15" fill="rgb(241,149,10)"/><text x="84.3804%" y="431.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (85 samples, 0.05%)</title><rect x="84.1645%" y="421" width="0.0491%" height="15" fill="rgb(249,206,44)"/><text x="84.4145%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (33 samples, 0.02%)</title><rect x="84.1945%" y="405" width="0.0190%" height="15" fill="rgb(251,153,30)"/><text x="84.4445%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.02%)</title><rect x="84.2205%" y="421" width="0.0167%" height="15" fill="rgb(239,152,38)"/><text x="84.4705%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (32 samples, 0.02%)</title><rect x="84.2465%" y="421" width="0.0185%" height="15" fill="rgb(249,139,47)"/><text x="84.4965%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (30 samples, 0.02%)</title><rect x="84.2649%" y="421" width="0.0173%" height="15" fill="rgb(244,64,35)"/><text x="84.5149%" y="431.50"></text></g><g><title>GloveExample`main (146,004 samples, 84.28%)</title><rect x="0.0000%" y="437" width="84.2828%" height="15" fill="rgb(216,46,15)"/><text x="0.2500%" y="447.50">GloveExample`main</text></g><g><title>GloveExample`0x5 (146,072 samples, 84.32%)</title><rect x="0.0000%" y="469" width="84.3221%" height="15" fill="rgb(250,74,19)"/><text x="0.2500%" y="479.50">GloveExample`0x5</text></g><g><title>libdyld.dylib`start (146,072 samples, 84.32%)</title><rect x="0.0000%" y="453" width="84.3221%" height="15" fill="rgb(249,42,33)"/><text x="0.2500%" y="463.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (65 samples, 0.04%)</title><rect x="84.2846%" y="437" width="0.0375%" height="15" fill="rgb(242,149,17)"/><text x="84.5346%" y="447.50"></text></g><g><title>libomp.dylib`__kmp_hardware_timestamp (2,026 samples, 1.17%)</title><rect x="84.3994%" y="357" width="1.1695%" height="15" fill="rgb(244,29,21)"/><text x="84.6494%" y="367.50"></text></g><g><title>libomp.dylib`__kmp_init_implicit_task (129 samples, 0.07%)</title><rect x="85.5690%" y="357" width="0.0745%" height="15" fill="rgb(220,130,37)"/><text x="85.8190%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (499 samples, 0.29%)</title><rect x="95.6053%" y="341" width="0.2881%" height="15" fill="rgb(211,67,2)"/><text x="95.8553%" y="351.50"></text></g><g><title>libomp.dylib`kmp_flag_64::wait (17,757 samples, 10.25%)</title><rect x="85.6475%" y="357" width="10.2505%" height="15" fill="rgb(235,68,52)"/><text x="85.8975%" y="367.50">libomp.dylib`km..</text></g><g><title>libomp.dylib`__kmp_hyper_barrier_release(barrier_type, kmp_info*, int, int, int, void*) (19,969 samples, 11.53%)</title><rect x="84.3735%" y="373" width="11.5274%" height="15" fill="rgb(246,142,3)"/><text x="84.6235%" y="383.50">libomp.dylib`__km..</text></g><g><title>libomp.dylib`__kmp_fork_barrier(int, int) (19,999 samples, 11.54%)</title><rect x="84.3579%" y="389" width="11.5447%" height="15" fill="rgb(241,25,7)"/><text x="84.6079%" y="399.50">libomp.dylib`__km..</text></g><g><title>libomp.dylib`__kmp_finish_implicit_task (21 samples, 0.01%)</title><rect x="95.9291%" y="373" width="0.0121%" height="15" fill="rgb(242,119,39)"/><text x="96.1791%" y="383.50"></text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::SimHash&gt;::operator() (5,864 samples, 3.39%)</title><rect x="96.3863%" y="341" width="3.3851%" height="15" fill="rgb(241,98,45)"/><text x="96.6363%" y="351.50">Glo..</text></g><g><title>libomp.dylib`__kmp_get_global_thread_id_reg (55 samples, 0.03%)</title><rect x="99.7720%" y="341" width="0.0317%" height="15" fill="rgb(254,28,30)"/><text x="100.0220%" y="351.50"></text></g><g><title>libomp.dylib`__kmp_get_global_thread_id (53 samples, 0.03%)</title><rect x="99.7731%" y="325" width="0.0306%" height="15" fill="rgb(241,142,54)"/><text x="100.0231%" y="335.50"></text></g><g><title>libomp.dylib`__kmpc_for_static_fini (18 samples, 0.01%)</title><rect x="99.8037%" y="341" width="0.0104%" height="15" fill="rgb(222,85,15)"/><text x="100.0537%" y="351.50"></text></g><g><title>GloveExample`.omp_outlined. (6,733 samples, 3.89%)</title><rect x="95.9476%" y="357" width="3.8867%" height="15" fill="rgb(210,85,47)"/><text x="96.1976%" y="367.50">Glov..</text></g><g><title>libomp.dylib`__kmpc_for_static_init_4u (35 samples, 0.02%)</title><rect x="99.8141%" y="341" width="0.0202%" height="15" fill="rgb(224,206,25)"/><text x="100.0641%" y="351.50"></text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::SimHash&gt;::operator() (66 samples, 0.04%)</title><rect x="99.8361%" y="357" width="0.0381%" height="15" fill="rgb(243,201,19)"/><text x="100.0861%" y="367.50"></text></g><g><title>libomp.dylib`__kmp_invoke_task_func (6,902 samples, 3.98%)</title><rect x="95.9055%" y="389" width="3.9843%" height="15" fill="rgb(236,59,4)"/><text x="96.1555%" y="399.50">libo..</text></g><g><title>libomp.dylib`__kmp_invoke_microtask (6,840 samples, 3.95%)</title><rect x="95.9413%" y="373" width="3.9485%" height="15" fill="rgb(254,179,45)"/><text x="96.1913%" y="383.50">libo..</text></g><g><title>libomp.dylib`__kmp_hyper_barrier_gather(barrier_type, kmp_info*, int, int, void (*)(void*, void*), void*) (86 samples, 0.05%)</title><rect x="99.9480%" y="373" width="0.0496%" height="15" fill="rgb(226,14,10)"/><text x="100.1980%" y="383.50"></text></g><g><title>libomp.dylib`kmp_flag_64::release (72 samples, 0.04%)</title><rect x="99.9561%" y="357" width="0.0416%" height="15" fill="rgb(244,27,41)"/><text x="100.2061%" y="367.50"></text></g><g><title>all (173,231 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(235,35,32)"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (27,159 samples, 15.68%)</title><rect x="84.3221%" y="469" width="15.6779%" height="15" fill="rgb(218,68,31)"/><text x="84.5721%" y="479.50">libsystem_pthread.dylib`..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (27,159 samples, 15.68%)</title><rect x="84.3221%" y="453" width="15.6779%" height="15" fill="rgb(207,120,37)"/><text x="84.5721%" y="463.50">libsystem_pthread.dylib`..</text></g><g><title>libsystem_pthread.dylib`_pthread_body (27,159 samples, 15.68%)</title><rect x="84.3221%" y="437" width="15.6779%" height="15" fill="rgb(227,98,0)"/><text x="84.5721%" y="447.50">libsystem_pthread.dylib`..</text></g><g><title>libomp.dylib`__kmp_launch_worker(void*) (27,159 samples, 15.68%)</title><rect x="84.3221%" y="421" width="15.6779%" height="15" fill="rgb(207,7,3)"/><text x="84.5721%" y="431.50">libomp.dylib`__kmp_launc..</text></g><g><title>libomp.dylib`__kmp_launch_thread (27,153 samples, 15.67%)</title><rect x="84.3256%" y="405" width="15.6744%" height="15" fill="rgb(206,98,19)"/><text x="84.5756%" y="415.50">libomp.dylib`__kmp_launc..</text></g><g><title>libomp.dylib`__kmp_join_barrier(int) (191 samples, 0.11%)</title><rect x="99.8897%" y="389" width="0.1103%" height="15" fill="rgb(217,5,26)"/><text x="100.1397%" y="399.50"></text></g></svg></svg>
<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>GloveExample`0x101390008 (1 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0219%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="319.50"></text></g><g><title>libdyld.dylib`dyld_stub_binder (1 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0219%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="303.50"></text></g><g><title>dyld`dyld::fastBindLazySymbol (1 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0219%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="287.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::doBindFastLazySymbol(unsigned int, ImageLoader::LinkContext const&amp;, void (*)(), void (*) (1 samples, 0.02%)</title><rect x="0.0000%" y="261" width="0.0219%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="271.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolve (1 samples, 0.02%)</title><rect x="0.0000%" y="245" width="0.0219%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="255.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolveTwolevel (1 samples, 0.02%)</title><rect x="0.0000%" y="229" width="0.0219%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="239.50"></text></g><g><title>dyld`ImageLoader::findExportedSymbolAddress (1 samples, 0.02%)</title><rect x="0.0000%" y="213" width="0.0219%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="223.50"></text></g><g><title>dyld`ImageLoaderMachO::findExportedSymbol (1 samples, 0.02%)</title><rect x="0.0000%" y="197" width="0.0219%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="207.50"></text></g><g><title>dyld`ImageLoaderMachO::libPath (1 samples, 0.02%)</title><rect x="0.0000%" y="181" width="0.0219%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="191.50"></text></g><g><title>GloveExample`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="0.1095%" y="293" width="0.0219%" height="15" fill="rgb(220,122,19)"/><text x="0.3595%" y="303.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.1314%" y="101" width="0.0219%" height="15" fill="rgb(250,228,42)"/><text x="0.3814%" y="111.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.1314%" y="85" width="0.0219%" height="15" fill="rgb(240,193,28)"/><text x="0.3814%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="0.1314%" y="69" width="0.0219%" height="15" fill="rgb(216,20,37)"/><text x="0.3814%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="0.1314%" y="53" width="0.0219%" height="15" fill="rgb(206,188,39)"/><text x="0.3814%" y="63.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.04%)</title><rect x="0.1314%" y="117" width="0.0438%" height="15" fill="rgb(217,207,13)"/><text x="0.3814%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="0.1533%" y="101" width="0.0219%" height="15" fill="rgb(231,73,38)"/><text x="0.4033%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="0.1533%" y="85" width="0.0219%" height="15" fill="rgb(225,20,46)"/><text x="0.4033%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="0.1533%" y="69" width="0.0219%" height="15" fill="rgb(210,31,41)"/><text x="0.4033%" y="79.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1314%" y="293" width="0.0657%" height="15" fill="rgb(221,200,47)"/><text x="0.3814%" y="303.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1314%" y="277" width="0.0657%" height="15" fill="rgb(226,26,5)"/><text x="0.3814%" y="287.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1314%" y="261" width="0.0657%" height="15" fill="rgb(249,33,26)"/><text x="0.3814%" y="271.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1314%" y="245" width="0.0657%" height="15" fill="rgb(235,183,28)"/><text x="0.3814%" y="255.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1314%" y="229" width="0.0657%" height="15" fill="rgb(221,5,38)"/><text x="0.3814%" y="239.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1314%" y="213" width="0.0657%" height="15" fill="rgb(247,18,42)"/><text x="0.3814%" y="223.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1314%" y="197" width="0.0657%" height="15" fill="rgb(241,131,45)"/><text x="0.3814%" y="207.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1314%" y="181" width="0.0657%" height="15" fill="rgb(249,31,29)"/><text x="0.3814%" y="191.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1314%" y="165" width="0.0657%" height="15" fill="rgb(225,111,53)"/><text x="0.3814%" y="175.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1314%" y="149" width="0.0657%" height="15" fill="rgb(238,160,17)"/><text x="0.3814%" y="159.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1314%" y="133" width="0.0657%" height="15" fill="rgb(214,148,48)"/><text x="0.3814%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="0.1752%" y="117" width="0.0219%" height="15" fill="rgb(232,36,49)"/><text x="0.4252%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="0.1752%" y="101" width="0.0219%" height="15" fill="rgb(209,103,24)"/><text x="0.4252%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="0.1752%" y="85" width="0.0219%" height="15" fill="rgb(229,88,8)"/><text x="0.4252%" y="95.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::uflow (3 samples, 0.07%)</title><rect x="0.5474%" y="277" width="0.0657%" height="15" fill="rgb(213,181,19)"/><text x="0.7974%" y="287.50"></text></g><g><title>GloveExample`std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::underflow (3 samples, 0.07%)</title><rect x="0.5474%" y="261" width="0.0657%" height="15" fill="rgb(254,191,54)"/><text x="0.7974%" y="271.50"></text></g><g><title>libsystem_c.dylib`fread (3 samples, 0.07%)</title><rect x="0.5474%" y="245" width="0.0657%" height="15" fill="rgb(241,83,37)"/><text x="0.7974%" y="255.50"></text></g><g><title>libsystem_c.dylib`__fread (3 samples, 0.07%)</title><rect x="0.5474%" y="229" width="0.0657%" height="15" fill="rgb(233,36,39)"/><text x="0.7974%" y="239.50"></text></g><g><title>libsystem_c.dylib`__srefill1 (3 samples, 0.07%)</title><rect x="0.5474%" y="213" width="0.0657%" height="15" fill="rgb(226,3,54)"/><text x="0.7974%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__read_nocancel (3 samples, 0.07%)</title><rect x="0.5474%" y="197" width="0.0657%" height="15" fill="rgb(245,192,40)"/><text x="0.7974%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="1.1167%" y="197" width="0.0219%" height="15" fill="rgb(238,167,29)"/><text x="1.3667%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (4 samples, 0.09%)</title><rect x="1.0948%" y="245" width="0.0876%" height="15" fill="rgb(232,182,51)"/><text x="1.3448%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.09%)</title><rect x="1.0948%" y="229" width="0.0876%" height="15" fill="rgb(231,60,39)"/><text x="1.3448%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.07%)</title><rect x="1.1167%" y="213" width="0.0657%" height="15" fill="rgb(208,69,12)"/><text x="1.3667%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="1.1386%" y="197" width="0.0438%" height="15" fill="rgb(235,93,37)"/><text x="1.3886%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="1.1386%" y="181" width="0.0438%" height="15" fill="rgb(213,116,39)"/><text x="1.3886%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="1.1605%" y="165" width="0.0219%" height="15" fill="rgb(222,207,29)"/><text x="1.4105%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="1.1824%" y="245" width="0.0438%" height="15" fill="rgb(206,96,30)"/><text x="1.4324%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="1.2043%" y="229" width="0.0219%" height="15" fill="rgb(218,138,4)"/><text x="1.4543%" y="239.50"></text></g><g><title>GloveExample`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp; std::__1::getline&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;(std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (50 samples, 1.09%)</title><rect x="0.1971%" y="293" width="1.0948%" height="15" fill="rgb(250,191,14)"/><text x="0.4471%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back (31 samples, 0.68%)</title><rect x="0.6131%" y="277" width="0.6788%" height="15" fill="rgb(239,60,40)"/><text x="0.8631%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by (9 samples, 0.20%)</title><rect x="1.0948%" y="261" width="0.1971%" height="15" fill="rgb(206,27,48)"/><text x="1.3448%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.07%)</title><rect x="1.2262%" y="245" width="0.0657%" height="15" fill="rgb(225,35,8)"/><text x="1.4762%" y="255.50"></text></g><g><title>GloveExample`std::__1::basic_stringbuf&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::str(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="1.2919%" y="293" width="0.0438%" height="15" fill="rgb(250,213,24)"/><text x="1.5419%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::operator=(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="1.2919%" y="277" width="0.0438%" height="15" fill="rgb(247,123,22)"/><text x="1.5419%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign (2 samples, 0.04%)</title><rect x="1.2919%" y="261" width="0.0438%" height="15" fill="rgb(231,138,38)"/><text x="1.5419%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace (2 samples, 0.04%)</title><rect x="1.2919%" y="245" width="0.0438%" height="15" fill="rgb(231,145,46)"/><text x="1.5419%" y="255.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="1.2919%" y="229" width="0.0438%" height="15" fill="rgb(251,118,11)"/><text x="1.5419%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.04%)</title><rect x="1.2919%" y="213" width="0.0438%" height="15" fill="rgb(217,147,25)"/><text x="1.5419%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.04%)</title><rect x="1.2919%" y="197" width="0.0438%" height="15" fill="rgb(247,81,37)"/><text x="1.5419%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="1.2919%" y="181" width="0.0438%" height="15" fill="rgb(209,12,38)"/><text x="1.5419%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="1.2919%" y="165" width="0.0438%" height="15" fill="rgb(227,1,9)"/><text x="1.5419%" y="175.50"></text></g><g><title>GloveExample`std::__1::enable_if&lt;(__is_forward_iterator&lt;float*&gt;::value) &amp;&amp; (is_constructible&lt;float, std::__1::iterator_traits&lt;float*&gt;::reference&gt;::value), void&gt;::type std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt;::assign&lt;float*&gt; (2 samples, 0.04%)</title><rect x="1.3357%" y="293" width="0.0438%" height="15" fill="rgb(248,47,43)"/><text x="1.5857%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1.3357%" y="277" width="0.0438%" height="15" fill="rgb(221,10,30)"/><text x="1.5857%" y="287.50"></text></g><g><title>GloveExample`std::__1::__tree_node_base&lt;void*&gt;*&amp; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::__find_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;(std::__1::__tree_end_node&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;*&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (5 samples, 0.11%)</title><rect x="1.3795%" y="277" width="0.1095%" height="15" fill="rgb(210,229,1)"/><text x="1.6295%" y="287.50"></text></g><g><title>GloveExample`std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="1.3795%" y="293" width="0.1314%" height="15" fill="rgb(222,148,37)"/><text x="1.6295%" y="303.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="1.4889%" y="277" width="0.0219%" height="15" fill="rgb(234,67,33)"/><text x="1.7389%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="1.4889%" y="261" width="0.0219%" height="15" fill="rgb(247,98,35)"/><text x="1.7389%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.02%)</title><rect x="1.4889%" y="245" width="0.0219%" height="15" fill="rgb(247,138,52)"/><text x="1.7389%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="1.4889%" y="229" width="0.0219%" height="15" fill="rgb(213,79,30)"/><text x="1.7389%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="1.4889%" y="213" width="0.0219%" height="15" fill="rgb(246,177,23)"/><text x="1.7389%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="1.4889%" y="197" width="0.0219%" height="15" fill="rgb(230,62,27)"/><text x="1.7389%" y="207.50"></text></g><g><title>GloveExample`void std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::__assign_multi&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node (6 samples, 0.13%)</title><rect x="1.5108%" y="293" width="0.1314%" height="15" fill="rgb(216,154,8)"/><text x="1.7608%" y="303.50"></text></g><g><title>GloveExample`std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;*, long&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type (5 samples, 0.11%)</title><rect x="1.5327%" y="277" width="0.1095%" height="15" fill="rgb(244,35,45)"/><text x="1.7827%" y="287.50"></text></g><g><title>GloveExample`std::__1::unique_ptr&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;, std::__1::__tree_node_destructor&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt; &gt; &gt; &gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits (4 samples, 0.09%)</title><rect x="1.5546%" y="261" width="0.0876%" height="15" fill="rgb(251,115,12)"/><text x="1.8046%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.09%)</title><rect x="1.5546%" y="245" width="0.0876%" height="15" fill="rgb(240,54,50)"/><text x="1.8046%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="1.6641%" y="229" width="0.0219%" height="15" fill="rgb(233,84,52)"/><text x="1.9141%" y="239.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.07%)</title><rect x="1.6641%" y="277" width="0.0657%" height="15" fill="rgb(207,117,47)"/><text x="1.9141%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.07%)</title><rect x="1.6641%" y="261" width="0.0657%" height="15" fill="rgb(249,43,39)"/><text x="1.9141%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.07%)</title><rect x="1.6641%" y="245" width="0.0657%" height="15" fill="rgb(209,38,44)"/><text x="1.9141%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="1.6860%" y="229" width="0.0438%" height="15" fill="rgb(236,212,23)"/><text x="1.9360%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="1.6860%" y="213" width="0.0438%" height="15" fill="rgb(242,79,21)"/><text x="1.9360%" y="223.50"></text></g><g><title>GloveExample`void std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt;::__push_back_slow_path&lt;float const&amp;&gt; (6 samples, 0.13%)</title><rect x="1.6422%" y="293" width="0.1314%" height="15" fill="rgb(211,96,35)"/><text x="1.8922%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1.7298%" y="277" width="0.0438%" height="15" fill="rgb(253,215,40)"/><text x="1.9798%" y="287.50"></text></g><g><title>GloveExample`void std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;::__push_back_slow_path&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="1.7736%" y="293" width="0.0219%" height="15" fill="rgb(211,81,21)"/><text x="2.0236%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="1.7736%" y="277" width="0.0219%" height="15" fill="rgb(208,190,38)"/><text x="2.0236%" y="287.50"></text></g><g><title>libc+ (5 samples, 0.11%)</title><rect x="1.7955%" y="293" width="0.1095%" height="15" fill="rgb(235,213,38)"/><text x="2.0455%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__release_shared (5 samples, 0.11%)</title><rect x="1.9050%" y="293" width="0.1095%" height="15" fill="rgb(237,122,38)"/><text x="2.1550%" y="303.50"></text></g><g><title>libc+ (2 samples, 0.04%)</title><rect x="2.1020%" y="277" width="0.0438%" height="15" fill="rgb(244,218,35)"/><text x="2.3520%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::__check_grouping(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="2.1458%" y="277" width="0.0219%" height="15" fill="rgb(240,68,47)"/><text x="2.3958%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__add_shared (9 samples, 0.20%)</title><rect x="2.1677%" y="277" width="0.1971%" height="15" fill="rgb(210,16,53)"/><text x="2.4177%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__release_shared (6 samples, 0.13%)</title><rect x="2.3648%" y="277" width="0.1314%" height="15" fill="rgb(235,124,12)"/><text x="2.6148%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__add_shared (8 samples, 0.18%)</title><rect x="2.6494%" y="261" width="0.1752%" height="15" fill="rgb(224,169,11)"/><text x="2.8994%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sentry::sentry(std::__1::basic_istream&lt;char, std::__1::char_traits (17 samples, 0.37%)</title><rect x="2.4962%" y="277" width="0.3722%" height="15" fill="rgb(250,166,2)"/><text x="2.7462%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::use_facet (2 samples, 0.04%)</title><rect x="2.8246%" y="261" width="0.0438%" height="15" fill="rgb(242,216,29)"/><text x="3.0746%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::id::__get (1 samples, 0.02%)</title><rect x="2.8465%" y="245" width="0.0219%" height="15" fill="rgb(230,116,27)"/><text x="3.0965%" y="255.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="4.1165%" y="261" width="0.0219%" height="15" fill="rgb(228,99,48)"/><text x="4.3665%" y="271.50"></text></g><g><title>libsystem_c.dylib`__copybits_D2A (1 samples, 0.02%)</title><rect x="5.4303%" y="213" width="0.0219%" height="15" fill="rgb(253,11,6)"/><text x="5.6803%" y="223.50"></text></g><g><title>libsystem_c.dylib`__increment_D2A (1 samples, 0.02%)</title><rect x="5.4522%" y="213" width="0.0219%" height="15" fill="rgb(247,143,39)"/><text x="5.7022%" y="223.50"></text></g><g><title>libsystem_c.dylib`__Bfree_D2A (2 samples, 0.04%)</title><rect x="5.7806%" y="197" width="0.0438%" height="15" fill="rgb(236,97,10)"/><text x="6.0306%" y="207.50"></text></g><g><title>libsystem_c.dylib`__any_on_D2A (2 samples, 0.04%)</title><rect x="5.8244%" y="197" width="0.0438%" height="15" fill="rgb(233,208,19)"/><text x="6.0744%" y="207.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$pthread_getspecific (1 samples, 0.02%)</title><rect x="5.9339%" y="181" width="0.0219%" height="15" fill="rgb(216,164,2)"/><text x="6.1839%" y="191.50"></text></g><g><title>libsystem_c.dylib`__Balloc_D2A (6 samples, 0.13%)</title><rect x="5.9558%" y="181" width="0.1314%" height="15" fill="rgb(220,129,5)"/><text x="6.2058%" y="191.50"></text></g><g><title>libsystem_c.dylib`__d2b_D2A (15 samples, 0.33%)</title><rect x="5.8682%" y="197" width="0.3284%" height="15" fill="rgb(242,17,10)"/><text x="6.1182%" y="207.50"></text></g><g><title>libsystem_c.dylib`__lo0bits_D2A (5 samples, 0.11%)</title><rect x="6.0871%" y="181" width="0.1095%" height="15" fill="rgb(242,107,0)"/><text x="6.3371%" y="191.50"></text></g><g><title>libsystem_c.dylib`__hi0bits_D2A (2 samples, 0.04%)</title><rect x="6.1966%" y="197" width="0.0438%" height="15" fill="rgb(251,28,31)"/><text x="6.4466%" y="207.50"></text></g><g><title>libsystem_c.dylib`__increment_D2A (1 samples, 0.02%)</title><rect x="6.2404%" y="197" width="0.0219%" height="15" fill="rgb(233,223,10)"/><text x="6.4904%" y="207.50"></text></g><g><title>libsystem_c.dylib`__lo0bits_D2A (1 samples, 0.02%)</title><rect x="6.2623%" y="197" width="0.0219%" height="15" fill="rgb(215,21,27)"/><text x="6.5123%" y="207.50"></text></g><g><title>libc++.1.dylib`float std::__1::__num_get_float&lt;float&gt; (103 samples, 2.26%)</title><rect x="4.1384%" y="261" width="2.2553%" height="15" fill="rgb(232,23,21)"/><text x="4.3884%" y="271.50">l..</text></g><g><title>libsystem_c.dylib`strtof_l (97 samples, 2.12%)</title><rect x="4.2698%" y="245" width="2.1239%" height="15" fill="rgb(244,5,23)"/><text x="4.5198%" y="255.50">l..</text></g><g><title>libsystem_c.dylib`__strtodg (85 samples, 1.86%)</title><rect x="4.5325%" y="229" width="1.8612%" height="15" fill="rgb(226,81,46)"/><text x="4.7825%" y="239.50">l..</text></g><g><title>libsystem_c.dylib`__rvOK_D2A (42 samples, 0.92%)</title><rect x="5.4741%" y="213" width="0.9196%" height="15" fill="rgb(247,70,30)"/><text x="5.7241%" y="223.50"></text></g><g><title>libsystem_c.dylib`__rshift_D2A (5 samples, 0.11%)</title><rect x="6.2842%" y="197" width="0.1095%" height="15" fill="rgb(212,68,19)"/><text x="6.5342%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::__num_get&lt;char&gt;::__stage2_float_loop(char, bool&amp;, char&amp;, char*, char*&amp;, char, char, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (104 samples, 2.28%)</title><rect x="6.3937%" y="261" width="2.2772%" height="15" fill="rgb(240,187,13)"/><text x="6.6437%" y="271.50">l..</text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__add_shared (1 samples, 0.02%)</title><rect x="8.7804%" y="245" width="0.0219%" height="15" fill="rgb(223,113,26)"/><text x="9.0304%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::ctype&lt;char&gt;::do_widen (13 samples, 0.28%)</title><rect x="8.8023%" y="245" width="0.2847%" height="15" fill="rgb(206,192,2)"/><text x="9.0523%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::ios_base::getloc (13 samples, 0.28%)</title><rect x="9.0869%" y="245" width="0.2847%" height="15" fill="rgb(241,108,4)"/><text x="9.3369%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__add_shared (10 samples, 0.22%)</title><rect x="9.1526%" y="229" width="0.2190%" height="15" fill="rgb(247,173,49)"/><text x="9.4026%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::id::__get (1 samples, 0.02%)</title><rect x="9.3716%" y="245" width="0.0219%" height="15" fill="rgb(224,114,35)"/><text x="9.6216%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::locale (1 samples, 0.02%)</title><rect x="9.3935%" y="245" width="0.0219%" height="15" fill="rgb(245,159,27)"/><text x="9.6435%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::numpunct&lt;char&gt;::do_decimal_point (1 samples, 0.02%)</title><rect x="9.4154%" y="245" width="0.0219%" height="15" fill="rgb(245,172,44)"/><text x="9.6654%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::__num_get&lt;char&gt;::__stage2_float_prep (37 samples, 0.81%)</title><rect x="8.6709%" y="261" width="0.8102%" height="15" fill="rgb(236,23,11)"/><text x="8.9209%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::numpunct&lt;char&gt;::do_grouping (2 samples, 0.04%)</title><rect x="9.4373%" y="245" width="0.0438%" height="15" fill="rgb(205,117,38)"/><text x="9.6873%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="9.4592%" y="229" width="0.0219%" height="15" fill="rgb(237,72,25)"/><text x="9.7092%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::__shared_count::__release_shared (10 samples, 0.22%)</title><rect x="9.4811%" y="261" width="0.2190%" height="15" fill="rgb(244,70,9)"/><text x="9.7311%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="9.7000%" y="261" width="0.0219%" height="15" fill="rgb(217,125,39)"/><text x="9.9500%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append (8 samples, 0.18%)</title><rect x="9.7219%" y="245" width="0.1752%" height="15" fill="rgb(235,36,10)"/><text x="9.9719%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.07%)</title><rect x="9.8314%" y="229" width="0.0657%" height="15" fill="rgb(251,123,47)"/><text x="10.0814%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize (10 samples, 0.22%)</title><rect x="9.7219%" y="261" width="0.2190%" height="15" fill="rgb(221,13,13)"/><text x="9.9719%" y="271.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (2 samples, 0.04%)</title><rect x="9.8971%" y="245" width="0.0438%" height="15" fill="rgb(238,131,9)"/><text x="10.1471%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::__imp::use_facet (4 samples, 0.09%)</title><rect x="9.9409%" y="261" width="0.0876%" height="15" fill="rgb(211,50,8)"/><text x="10.1909%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::numpunct&lt;char&gt;::do_thousands_sep (1 samples, 0.02%)</title><rect x="10.0285%" y="261" width="0.0219%" height="15" fill="rgb(245,182,24)"/><text x="10.2785%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; std::__1::num_get&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt;::__do_get_floating_point&lt;float&gt;(std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt;, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits (330 samples, 7.23%)</title><rect x="2.8684%" y="277" width="7.2257%" height="15" fill="rgb(242,14,37)"/><text x="3.1184%" y="287.50">libc++.1.d..</text></g><g><title>libsystem_kernel.dylib`__error (2 samples, 0.04%)</title><rect x="10.0504%" y="261" width="0.0438%" height="15" fill="rgb(246,228,12)"/><text x="10.3004%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::operator&gt;&gt; (370 samples, 8.10%)</title><rect x="2.0145%" y="293" width="8.1016%" height="15" fill="rgb(213,55,15)"/><text x="2.2645%" y="303.50">libc++.1.dy..</text></g><g><title>libc++.1.dylib`std::__1::locale::use_facet (1 samples, 0.02%)</title><rect x="10.0942%" y="277" width="0.0219%" height="15" fill="rgb(209,9,3)"/><text x="10.3442%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::basic_streambuf (1 samples, 0.02%)</title><rect x="10.1160%" y="293" width="0.0219%" height="15" fill="rgb(230,59,30)"/><text x="10.3660%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back (2 samples, 0.04%)</title><rect x="10.1379%" y="293" width="0.0438%" height="15" fill="rgb(209,121,21)"/><text x="10.3879%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::locale::__imp::use_facet (1 samples, 0.02%)</title><rect x="10.1817%" y="293" width="0.0219%" height="15" fill="rgb(220,109,13)"/><text x="10.4317%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="10.2036%" y="277" width="0.0219%" height="15" fill="rgb(232,18,1)"/><text x="10.4536%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.09%)</title><rect x="10.2036%" y="293" width="0.0876%" height="15" fill="rgb(215,41,42)"/><text x="10.4536%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.07%)</title><rect x="10.2255%" y="277" width="0.0657%" height="15" fill="rgb(224,123,36)"/><text x="10.4755%" y="287.50"></text></g><g><title>GloveExample`Dataset::read_glove(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (475 samples, 10.40%)</title><rect x="0.0219%" y="309" width="10.4007%" height="15" fill="rgb(240,125,3)"/><text x="0.2719%" y="319.50">GloveExample`Da..</text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.13%)</title><rect x="10.2912%" y="293" width="0.1314%" height="15" fill="rgb(205,98,50)"/><text x="10.5412%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.11%)</title><rect x="10.3131%" y="277" width="0.1095%" height="15" fill="rgb(205,185,37)"/><text x="10.5631%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.04%)</title><rect x="10.3788%" y="261" width="0.0438%" height="15" fill="rgb(238,207,15)"/><text x="10.6288%" y="271.50"></text></g><g><title>GloveExample`puffinn::UnitVectorFormat::generate_random (4 samples, 0.09%)</title><rect x="10.4226%" y="229" width="0.0876%" height="15" fill="rgb(213,199,42)"/><text x="10.6726%" y="239.50"></text></g><g><title>GloveExample`void std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt;::__push_back_slow_path&lt;float const&amp;&gt; (3 samples, 0.07%)</title><rect x="10.4445%" y="213" width="0.0657%" height="15" fill="rgb(235,201,11)"/><text x="10.6945%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="10.4664%" y="197" width="0.0438%" height="15" fill="rgb(207,46,11)"/><text x="10.7164%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.04%)</title><rect x="10.4664%" y="181" width="0.0438%" height="15" fill="rgb(241,35,35)"/><text x="10.7164%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.04%)</title><rect x="10.4664%" y="165" width="0.0438%" height="15" fill="rgb(243,32,47)"/><text x="10.7164%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="10.4664%" y="149" width="0.0438%" height="15" fill="rgb(247,202,23)"/><text x="10.7164%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="10.4664%" y="133" width="0.0438%" height="15" fill="rgb(219,102,11)"/><text x="10.7164%" y="143.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::Index(unsigned int, unsigned long long, puffinn::HashSourceArgs&lt;puffinn::FHTCrossPolytopeHash&gt; const&amp;, puffinn::HashSourceArgs (5 samples, 0.11%)</title><rect x="10.4226%" y="309" width="0.1095%" height="15" fill="rgb(243,110,44)"/><text x="10.6726%" y="319.50"></text></g><g><title>GloveExample`puffinn::Filterer&lt;puffinn::SimHash&gt;::Filterer(puffinn::HashSourceArgs&lt;puffinn::SimHash&gt; const&amp;, puffinn::DatasetDescription (5 samples, 0.11%)</title><rect x="10.4226%" y="293" width="0.1095%" height="15" fill="rgb(222,74,54)"/><text x="10.6726%" y="303.50"></text></g><g><title>GloveExample`puffinn::IndependentHashArgs&lt;puffinn::SimHash&gt;::build(puffinn::DatasetDescription (5 samples, 0.11%)</title><rect x="10.4226%" y="277" width="0.1095%" height="15" fill="rgb(216,99,12)"/><text x="10.6726%" y="287.50"></text></g><g><title>GloveExample`puffinn::IndependentHashSource&lt;puffinn::SimHash&gt;::IndependentHashSource(puffinn::DatasetDescription (5 samples, 0.11%)</title><rect x="10.4226%" y="261" width="0.1095%" height="15" fill="rgb(226,22,26)"/><text x="10.6726%" y="271.50"></text></g><g><title>GloveExample`puffinn::SimHashFunction::SimHashFunction(puffinn::DatasetDescription (5 samples, 0.11%)</title><rect x="10.4226%" y="245" width="0.1095%" height="15" fill="rgb(217,163,10)"/><text x="10.6726%" y="255.50"></text></g><g><title>GloveExample`puffinn::UnitVectorFormat::store(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; const&amp;, short*, puffinn::DatasetDescription (1 samples, 0.02%)</title><rect x="10.5102%" y="229" width="0.0219%" height="15" fill="rgb(213,25,53)"/><text x="10.7602%" y="239.50"></text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::SimHash&gt;::operator() (285 samples, 6.24%)</title><rect x="13.0720%" y="277" width="6.2404%" height="15" fill="rgb(252,105,26)"/><text x="13.3220%" y="287.50">GloveExa..</text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="19.3125%" y="277" width="0.0219%" height="15" fill="rgb(220,39,43)"/><text x="19.5625%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="19.3125%" y="261" width="0.0219%" height="15" fill="rgb(229,68,48)"/><text x="19.5625%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.02%)</title><rect x="19.3125%" y="245" width="0.0219%" height="15" fill="rgb(252,8,32)"/><text x="19.5625%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="19.3125%" y="229" width="0.0219%" height="15" fill="rgb(223,20,43)"/><text x="19.5625%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.02%)</title><rect x="19.3125%" y="213" width="0.0219%" height="15" fill="rgb(229,81,49)"/><text x="19.5625%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.02%)</title><rect x="19.3125%" y="197" width="0.0219%" height="15" fill="rgb(236,28,36)"/><text x="19.5625%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="19.3125%" y="181" width="0.0219%" height="15" fill="rgb(249,185,26)"/><text x="19.5625%" y="191.50"></text></g><g><title>GloveExample`puffinn::Filterer&lt;puffinn::SimHash&gt;::add_sketches(puffinn::Dataset (289 samples, 6.33%)</title><rect x="13.0282%" y="293" width="6.3280%" height="15" fill="rgb(249,174,33)"/><text x="13.2782%" y="303.50">GloveExa..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="19.3344%" y="277" width="0.0219%" height="15" fill="rgb(233,201,37)"/><text x="19.5844%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="19.3344%" y="261" width="0.0219%" height="15" fill="rgb(221,78,26)"/><text x="19.5844%" y="271.50"></text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::SimHash&gt;::operator() (1 samples, 0.02%)</title><rect x="19.3563%" y="293" width="0.0219%" height="15" fill="rgb(250,127,30)"/><text x="19.6063%" y="303.50"></text></g><g><title>GloveExample`puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild (4 samples, 0.09%)</title><rect x="19.3781%" y="277" width="0.0876%" height="15" fill="rgb(230,49,44)"/><text x="19.6281%" y="287.50"></text></g><g><title>GloveExample`puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::PrefixMap(std::__1::unique_ptr&lt;puffinn::Hash, std::__1::default_delete (14 samples, 0.31%)</title><rect x="19.3781%" y="293" width="0.3065%" height="15" fill="rgb(229,67,23)"/><text x="19.6281%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (10 samples, 0.22%)</title><rect x="19.4657%" y="277" width="0.2190%" height="15" fill="rgb(249,83,47)"/><text x="19.7157%" y="287.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (1 samples, 0.02%)</title><rect x="22.7940%" y="261" width="0.0219%" height="15" fill="rgb(215,43,3)"/><text x="23.0440%" y="271.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (1 samples, 0.02%)</title><rect x="24.0858%" y="245" width="0.0219%" height="15" fill="rgb(238,154,13)"/><text x="24.3358%" y="255.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort5&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (1 samples, 0.02%)</title><rect x="24.1077%" y="245" width="0.0219%" height="15" fill="rgb(219,56,2)"/><text x="24.3577%" y="255.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (2 samples, 0.04%)</title><rect x="25.3558%" y="229" width="0.0438%" height="15" fill="rgb(233,0,4)"/><text x="25.6058%" y="239.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (7 samples, 0.15%)</title><rect x="26.5601%" y="213" width="0.1533%" height="15" fill="rgb(235,30,7)"/><text x="26.8101%" y="223.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort5&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (2 samples, 0.04%)</title><rect x="26.7134%" y="213" width="0.0438%" height="15" fill="rgb(250,79,13)"/><text x="26.9634%" y="223.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (1 samples, 0.02%)</title><rect x="26.7353%" y="197" width="0.0219%" height="15" fill="rgb(211,146,34)"/><text x="26.9853%" y="207.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (7 samples, 0.15%)</title><rect x="27.5454%" y="197" width="0.1533%" height="15" fill="rgb(228,22,38)"/><text x="27.7954%" y="207.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort5&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (4 samples, 0.09%)</title><rect x="27.6987%" y="197" width="0.0876%" height="15" fill="rgb(235,168,5)"/><text x="27.9487%" y="207.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (1 samples, 0.02%)</title><rect x="27.7644%" y="181" width="0.0219%" height="15" fill="rgb(221,155,16)"/><text x="28.0144%" y="191.50"></text></g><g><title>GloveExample`unsigned int std::__1::__sort3&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (3 samples, 0.07%)</title><rect x="28.1804%" y="181" width="0.0657%" height="15" fill="rgb(215,215,53)"/><text x="28.4304%" y="191.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (318 samples, 6.96%)</title><rect x="21.4145%" y="277" width="6.9630%" height="15" fill="rgb(223,4,10)"/><text x="21.6645%" y="287.50">GloveExam..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (254 samples, 5.56%)</title><rect x="22.8159%" y="261" width="5.5616%" height="15" fill="rgb(234,103,6)"/><text x="23.0659%" y="271.50">GloveEx..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (194 samples, 4.25%)</title><rect x="24.1296%" y="245" width="4.2479%" height="15" fill="rgb(227,97,0)"/><text x="24.3796%" y="255.50">Glove..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (136 samples, 2.98%)</title><rect x="25.3996%" y="229" width="2.9779%" height="15" fill="rgb(234,150,53)"/><text x="25.6496%" y="239.50">Glo..</text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (74 samples, 1.62%)</title><rect x="26.7572%" y="213" width="1.6203%" height="15" fill="rgb(228,201,54)"/><text x="27.0072%" y="223.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (27 samples, 0.59%)</title><rect x="27.7863%" y="197" width="0.5912%" height="15" fill="rgb(222,22,37)"/><text x="28.0363%" y="207.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (6 samples, 0.13%)</title><rect x="28.2461%" y="181" width="0.1314%" height="15" fill="rgb(237,53,32)"/><text x="28.4961%" y="191.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (2 samples, 0.04%)</title><rect x="28.3337%" y="165" width="0.0438%" height="15" fill="rgb(233,25,53)"/><text x="28.5837%" y="175.50"></text></g><g><title>GloveExample`void std::__1::__sort&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;)&amp;, std::__1::pair&lt;unsigned int, unsigned int&gt;*&gt;(std::__1::pair&lt;unsigned int, unsigned int&gt;*, std::__1::pair&lt;unsigned int, unsigned int&gt;*, puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild()::&apos;lambda&apos;(std::__1::pair&lt;unsigned int, unsigned int&gt;&amp;, std::__1::pair (1 samples, 0.02%)</title><rect x="28.3556%" y="149" width="0.0219%" height="15" fill="rgb(210,40,34)"/><text x="28.6056%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (3 samples, 0.07%)</title><rect x="28.3775%" y="197" width="0.0657%" height="15" fill="rgb(241,220,44)"/><text x="28.6275%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (3 samples, 0.07%)</title><rect x="28.3775%" y="181" width="0.0657%" height="15" fill="rgb(235,28,35)"/><text x="28.6275%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (4 samples, 0.09%)</title><rect x="28.3775%" y="277" width="0.0876%" height="15" fill="rgb(210,56,17)"/><text x="28.6275%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.09%)</title><rect x="28.3775%" y="261" width="0.0876%" height="15" fill="rgb(224,130,29)"/><text x="28.6275%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (4 samples, 0.09%)</title><rect x="28.3775%" y="245" width="0.0876%" height="15" fill="rgb(235,212,8)"/><text x="28.6275%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.09%)</title><rect x="28.3775%" y="229" width="0.0876%" height="15" fill="rgb(223,33,50)"/><text x="28.6275%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (4 samples, 0.09%)</title><rect x="28.3775%" y="213" width="0.0876%" height="15" fill="rgb(219,149,13)"/><text x="28.6275%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.02%)</title><rect x="28.4432%" y="197" width="0.0219%" height="15" fill="rgb(250,156,29)"/><text x="28.6932%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.02%)</title><rect x="28.4432%" y="181" width="0.0219%" height="15" fill="rgb(216,193,19)"/><text x="28.6932%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="28.4651%" y="277" width="0.0438%" height="15" fill="rgb(216,135,14)"/><text x="28.7151%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="28.5089%" y="277" width="0.0219%" height="15" fill="rgb(241,47,5)"/><text x="28.7589%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="28.5089%" y="261" width="0.0219%" height="15" fill="rgb(233,42,35)"/><text x="28.7589%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.09%)</title><rect x="28.5308%" y="277" width="0.0876%" height="15" fill="rgb(231,13,6)"/><text x="28.7808%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.09%)</title><rect x="28.5308%" y="261" width="0.0876%" height="15" fill="rgb(207,181,40)"/><text x="28.7808%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.09%)</title><rect x="28.5308%" y="245" width="0.0876%" height="15" fill="rgb(254,173,49)"/><text x="28.7808%" y="255.50"></text></g><g><title>GloveExample`puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;::rebuild (414 samples, 9.07%)</title><rect x="19.6847%" y="293" width="9.0650%" height="15" fill="rgb(221,1,38)"/><text x="19.9347%" y="303.50">GloveExample`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.13%)</title><rect x="28.6183%" y="277" width="0.1314%" height="15" fill="rgb(206,124,46)"/><text x="28.8683%" y="287.50"></text></g><g><title>GloveExample`double std::__1::normal_distribution&lt;double&gt;::operator()&lt;std::__1::linear_congruential_engine&lt;unsigned int, 48271u, 0u, 2147483647u&gt; &gt;(std::__1::linear_congruential_engine&lt;unsigned int, 48271u, 0u, 2147483647u&gt;&amp;, std::__1::normal_distribution (8 samples, 0.18%)</title><rect x="28.7497%" y="245" width="0.1752%" height="15" fill="rgb(249,21,11)"/><text x="28.9997%" y="255.50"></text></g><g><title>GloveExample`DYLD-STUB$$log (6 samples, 0.13%)</title><rect x="31.4430%" y="229" width="0.1314%" height="15" fill="rgb(222,201,40)"/><text x="31.6930%" y="239.50"></text></g><g><title>GloveExample`double std::__1::normal_distribution&lt;double&gt;::operator()&lt;std::__1::linear_congruential_engine&lt;unsigned int, 48271u, 0u, 2147483647u&gt; &gt;(std::__1::linear_congruential_engine&lt;unsigned int, 48271u, 0u, 2147483647u&gt;&amp;, std::__1::normal_distribution (983 samples, 21.52%)</title><rect x="31.5743%" y="229" width="21.5240%" height="15" fill="rgb(235,61,29)"/><text x="31.8243%" y="239.50">GloveExample`double std::__1::norm..</text></g><g><title>GloveExample`puffinn::CrossPolytopeCollisionEstimates::CrossPolytopeCollisionEstimates (1,456 samples, 31.88%)</title><rect x="28.9249%" y="245" width="31.8809%" height="15" fill="rgb(219,207,3)"/><text x="29.1749%" y="255.50">GloveExample`puffinn::CrossPolytopeCollisionEstimate..</text></g><g><title>libsystem_m.dylib`0x00007fff78580860 (352 samples, 7.71%)</title><rect x="53.0983%" y="229" width="7.7075%" height="15" fill="rgb(222,56,46)"/><text x="53.3483%" y="239.50">libsystem_m..</text></g><g><title>GloveExample`puffinn::TensoredHashArgs&lt;puffinn::FHTCrossPolytopeHash&gt;::build(puffinn::DatasetDescription (1,465 samples, 32.08%)</title><rect x="28.7497%" y="293" width="32.0780%" height="15" fill="rgb(239,76,54)"/><text x="28.9997%" y="303.50">GloveExample`puffinn::TensoredHashArgs&lt;puffinn::FHTC..</text></g><g><title>GloveExample`puffinn::TensoredHashSource&lt;puffinn::FHTCrossPolytopeHash&gt;::TensoredHashSource(puffinn::DatasetDescription (1,465 samples, 32.08%)</title><rect x="28.7497%" y="277" width="32.0780%" height="15" fill="rgb(231,124,27)"/><text x="28.9997%" y="287.50">GloveExample`puffinn::TensoredHashSource&lt;puffinn::FH..</text></g><g><title>GloveExample`puffinn::IndependentHashSource&lt;puffinn::FHTCrossPolytopeHash&gt;::IndependentHashSource(puffinn::DatasetDescription (1,465 samples, 32.08%)</title><rect x="28.7497%" y="261" width="32.0780%" height="15" fill="rgb(249,195,6)"/><text x="28.9997%" y="271.50">GloveExample`puffinn::IndependentHashSource&lt;puffinn:..</text></g><g><title>GloveExample`puffinn::FHTCrossPolytopeHashFunction::FHTCrossPolytopeHashFunction(puffinn::DatasetDescription (1 samples, 0.02%)</title><rect x="60.8058%" y="245" width="0.0219%" height="15" fill="rgb(237,174,47)"/><text x="61.0558%" y="255.50"></text></g><g><title>GloveExample`puffinn::TensoredHashArgs&lt;puffinn::FHTCrossPolytopeHash&gt;::memory_usage(puffinn::DatasetDescription (1 samples, 0.02%)</title><rect x="60.8277%" y="293" width="0.0219%" height="15" fill="rgb(206,201,31)"/><text x="61.0777%" y="303.50"></text></g><g><title>GloveExample`puffinn::IndependentHashArgs&lt;puffinn::FHTCrossPolytopeHash&gt;::memory_usage(puffinn::DatasetDescription (1 samples, 0.02%)</title><rect x="60.8277%" y="277" width="0.0219%" height="15" fill="rgb(231,57,52)"/><text x="61.0777%" y="287.50"></text></g><g><title>GloveExample`puffinn::CrossPolytopeCollisionEstimates::CrossPolytopeCollisionEstimates (1 samples, 0.02%)</title><rect x="60.8277%" y="261" width="0.0219%" height="15" fill="rgb(248,177,22)"/><text x="61.0777%" y="271.50"></text></g><g><title>GloveExample`void std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt;::__push_back_slow_path&lt;float const&amp;&gt; (1 samples, 0.02%)</title><rect x="60.8277%" y="245" width="0.0219%" height="15" fill="rgb(215,211,37)"/><text x="61.0777%" y="255.50"></text></g><g><title>GloveExample`std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt; &gt;::__append (2 samples, 0.04%)</title><rect x="60.8496%" y="277" width="0.0438%" height="15" fill="rgb(241,128,51)"/><text x="61.0996%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="60.8496%" y="261" width="0.0438%" height="15" fill="rgb(227,165,31)"/><text x="61.0996%" y="271.50"></text></g><g><title>GloveExample`puffinn::FHTCrossPolytopeHashFunction::operator() (1 samples, 0.02%)</title><rect x="61.0247%" y="197" width="0.0219%" height="15" fill="rgb(228,167,24)"/><text x="61.2747%" y="207.50"></text></g><g><title>GloveExample`fht_float (60 samples, 1.31%)</title><rect x="63.1487%" y="165" width="1.3138%" height="15" fill="rgb(228,143,12)"/><text x="63.3987%" y="175.50"></text></g><g><title>GloveExample`.omp_outlined. (164 samples, 3.59%)</title><rect x="60.9372%" y="213" width="3.5910%" height="15" fill="rgb(249,149,8)"/><text x="61.1872%" y="223.50">Glov..</text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::FHTCrossPolytopeHash&gt;::operator() (159 samples, 3.48%)</title><rect x="61.0466%" y="197" width="3.4815%" height="15" fill="rgb(243,35,44)"/><text x="61.2966%" y="207.50">Glo..</text></g><g><title>GloveExample`puffinn::FHTCrossPolytopeHashFunction::operator() (155 samples, 3.39%)</title><rect x="61.1342%" y="181" width="3.3939%" height="15" fill="rgb(246,89,9)"/><text x="61.3842%" y="191.50">Glo..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.07%)</title><rect x="64.4624%" y="165" width="0.0657%" height="15" fill="rgb(233,213,13)"/><text x="64.7124%" y="175.50"></text></g><g><title>libomp.dylib`__kmp_fork_call (167 samples, 3.66%)</title><rect x="60.8934%" y="261" width="3.6567%" height="15" fill="rgb(233,141,41)"/><text x="61.1434%" y="271.50">libo..</text></g><g><title>libomp.dylib`__kmp_invoke_task_func (166 samples, 3.63%)</title><rect x="60.9153%" y="245" width="3.6348%" height="15" fill="rgb(239,167,4)"/><text x="61.1653%" y="255.50">libo..</text></g><g><title>libomp.dylib`__kmp_invoke_microtask (165 samples, 3.61%)</title><rect x="60.9372%" y="229" width="3.6129%" height="15" fill="rgb(209,217,16)"/><text x="61.1872%" y="239.50">libo..</text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::FHTCrossPolytopeHash&gt;::operator() (1 samples, 0.02%)</title><rect x="64.5281%" y="213" width="0.0219%" height="15" fill="rgb(219,88,35)"/><text x="64.7781%" y="223.50"></text></g><g><title>libomp.dylib`__kmp_get_global_thread_id_reg (1 samples, 0.02%)</title><rect x="64.5500%" y="261" width="0.0219%" height="15" fill="rgb(220,193,23)"/><text x="64.8000%" y="271.50"></text></g><g><title>libomp.dylib`__kmp_get_global_thread_id (1 samples, 0.02%)</title><rect x="64.5500%" y="245" width="0.0219%" height="15" fill="rgb(230,90,52)"/><text x="64.8000%" y="255.50"></text></g><g><title>libomp.dylib`__kmp_join_call (21 samples, 0.46%)</title><rect x="64.5719%" y="261" width="0.4598%" height="15" fill="rgb(252,106,19)"/><text x="64.8219%" y="271.50"></text></g><g><title>libomp.dylib`__kmp_internal_join (21 samples, 0.46%)</title><rect x="64.5719%" y="245" width="0.4598%" height="15" fill="rgb(206,74,20)"/><text x="64.8219%" y="255.50"></text></g><g><title>libomp.dylib`__kmp_join_barrier(int) (21 samples, 0.46%)</title><rect x="64.5719%" y="229" width="0.4598%" height="15" fill="rgb(230,138,44)"/><text x="64.8219%" y="239.50"></text></g><g><title>libomp.dylib`__kmp_hyper_barrier_gather(barrier_type, kmp_info*, int, int, void (*)(void*, void*), void*) (21 samples, 0.46%)</title><rect x="64.5719%" y="213" width="0.4598%" height="15" fill="rgb(235,182,43)"/><text x="64.8219%" y="223.50"></text></g><g><title>libomp.dylib`kmp_flag_64::wait (21 samples, 0.46%)</title><rect x="64.5719%" y="197" width="0.4598%" height="15" fill="rgb(242,16,51)"/><text x="64.8219%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (2 samples, 0.04%)</title><rect x="64.9880%" y="181" width="0.0438%" height="15" fill="rgb(248,9,4)"/><text x="65.2380%" y="191.50"></text></g><g><title>libomp.dylib`__kmpc_fork_call (190 samples, 4.16%)</title><rect x="60.8934%" y="277" width="4.1603%" height="15" fill="rgb(210,31,22)"/><text x="61.1434%" y="287.50">libom..</text></g><g><title>libomp.dylib`__kmp_release_ticket_lock (1 samples, 0.02%)</title><rect x="65.0317%" y="261" width="0.0219%" height="15" fill="rgb(239,54,39)"/><text x="65.2817%" y="271.50"></text></g><g><title>GloveExample`puffinn::TensoredHashSource&lt;puffinn::FHTCrossPolytopeHash&gt;::reset (193 samples, 4.23%)</title><rect x="60.8496%" y="293" width="4.2260%" height="15" fill="rgb(230,99,41)"/><text x="61.0996%" y="303.50">Glove..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="65.0536%" y="277" width="0.0219%" height="15" fill="rgb(253,106,12)"/><text x="65.3036%" y="287.50"></text></g><g><title>GloveExample`puffinn::TensoredHasher&lt;puffinn::FHTCrossPolytopeHash&gt;::operator() (7 samples, 0.15%)</title><rect x="65.0755%" y="293" width="0.1533%" height="15" fill="rgb(213,46,41)"/><text x="65.3255%" y="303.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="65.2288%" y="293" width="0.0219%" height="15" fill="rgb(215,133,35)"/><text x="65.4788%" y="303.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="65.2507%" y="293" width="0.0219%" height="15" fill="rgb(213,28,5)"/><text x="65.5007%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="65.2507%" y="277" width="0.0219%" height="15" fill="rgb(215,77,49)"/><text x="65.5007%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.02%)</title><rect x="65.2507%" y="261" width="0.0219%" height="15" fill="rgb(248,100,22)"/><text x="65.5007%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="65.2507%" y="245" width="0.0219%" height="15" fill="rgb(208,67,9)"/><text x="65.5007%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.02%)</title><rect x="65.2507%" y="229" width="0.0219%" height="15" fill="rgb(219,133,21)"/><text x="65.5007%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.02%)</title><rect x="65.2507%" y="213" width="0.0219%" height="15" fill="rgb(246,46,29)"/><text x="65.5007%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="65.2507%" y="197" width="0.0219%" height="15" fill="rgb(246,185,52)"/><text x="65.5007%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="65.2726%" y="293" width="0.0219%" height="15" fill="rgb(252,136,11)"/><text x="65.5226%" y="303.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::rebuild (2,502 samples, 54.78%)</title><rect x="10.5321%" y="309" width="54.7843%" height="15" fill="rgb(219,138,53)"/><text x="10.7821%" y="319.50">GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puff..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="65.2945%" y="293" width="0.0219%" height="15" fill="rgb(211,51,23)"/><text x="65.5445%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="65.2945%" y="277" width="0.0219%" height="15" fill="rgb(247,221,28)"/><text x="65.5445%" y="287.50"></text></g><g><title>GloveExample`std::__1::__vector_base&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;, std::__1::allocator&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt; &gt; &gt;::~__vector_base (9 samples, 0.20%)</title><rect x="65.3164%" y="293" width="0.1971%" height="15" fill="rgb(251,222,45)"/><text x="65.5664%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_large (9 samples, 0.20%)</title><rect x="65.3164%" y="277" width="0.1971%" height="15" fill="rgb(217,162,53)"/><text x="65.5664%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (9 samples, 0.20%)</title><rect x="65.3164%" y="261" width="0.1971%" height="15" fill="rgb(229,93,14)"/><text x="65.5664%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (9 samples, 0.20%)</title><rect x="65.3164%" y="245" width="0.1971%" height="15" fill="rgb(209,67,49)"/><text x="65.5664%" y="255.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::~Index (11 samples, 0.24%)</title><rect x="65.3164%" y="309" width="0.2409%" height="15" fill="rgb(213,87,29)"/><text x="65.5664%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="65.5135%" y="293" width="0.0438%" height="15" fill="rgb(205,151,52)"/><text x="65.7635%" y="303.50"></text></g><g><title>GloveExample`puffinn::TensoredHasher&lt;puffinn::FHTCrossPolytopeHash&gt;::operator() (7 samples, 0.15%)</title><rect x="65.5573%" y="309" width="0.1533%" height="15" fill="rgb(253,215,39)"/><text x="65.8073%" y="319.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="65.7105%" y="245" width="0.0657%" height="15" fill="rgb(221,220,41)"/><text x="65.9605%" y="255.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="65.7105%" y="229" width="0.0657%" height="15" fill="rgb(218,133,21)"/><text x="65.9605%" y="239.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="65.7105%" y="213" width="0.0657%" height="15" fill="rgb(221,193,43)"/><text x="65.9605%" y="223.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (3 samples, 0.07%)</title><rect x="65.7105%" y="197" width="0.0657%" height="15" fill="rgb(240,128,52)"/><text x="65.9605%" y="207.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.04%)</title><rect x="65.7324%" y="181" width="0.0438%" height="15" fill="rgb(253,114,12)"/><text x="65.9824%" y="191.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.04%)</title><rect x="65.7324%" y="165" width="0.0438%" height="15" fill="rgb(215,223,47)"/><text x="65.9824%" y="175.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.04%)</title><rect x="65.7324%" y="149" width="0.0438%" height="15" fill="rgb(248,225,23)"/><text x="65.9824%" y="159.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.04%)</title><rect x="65.7324%" y="133" width="0.0438%" height="15" fill="rgb(250,108,0)"/><text x="65.9824%" y="143.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.04%)</title><rect x="65.7324%" y="117" width="0.0438%" height="15" fill="rgb(228,208,7)"/><text x="65.9824%" y="127.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (1 samples, 0.02%)</title><rect x="65.7543%" y="101" width="0.0219%" height="15" fill="rgb(244,45,10)"/><text x="66.0043%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="65.7543%" y="85" width="0.0219%" height="15" fill="rgb(207,125,25)"/><text x="66.0043%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="65.7543%" y="69" width="0.0219%" height="15" fill="rgb(210,195,18)"/><text x="66.0043%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.02%)</title><rect x="65.7543%" y="53" width="0.0219%" height="15" fill="rgb(249,80,12)"/><text x="66.0043%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="65.7543%" y="37" width="0.0219%" height="15" fill="rgb(221,65,9)"/><text x="66.0043%" y="47.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (4 samples, 0.09%)</title><rect x="65.7105%" y="309" width="0.0876%" height="15" fill="rgb(235,49,36)"/><text x="65.9605%" y="319.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (4 samples, 0.09%)</title><rect x="65.7105%" y="293" width="0.0876%" height="15" fill="rgb(225,32,20)"/><text x="65.9605%" y="303.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (4 samples, 0.09%)</title><rect x="65.7105%" y="277" width="0.0876%" height="15" fill="rgb(215,141,46)"/><text x="65.9605%" y="287.50"></text></g><g><title>GloveExample`std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator (4 samples, 0.09%)</title><rect x="65.7105%" y="261" width="0.0876%" height="15" fill="rgb(250,160,47)"/><text x="65.9605%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="65.7762%" y="245" width="0.0219%" height="15" fill="rgb(216,222,40)"/><text x="66.0262%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="65.7762%" y="229" width="0.0219%" height="15" fill="rgb(234,217,39)"/><text x="66.0262%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.02%)</title><rect x="65.7762%" y="213" width="0.0219%" height="15" fill="rgb(207,178,40)"/><text x="66.0262%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.02%)</title><rect x="65.7762%" y="197" width="0.0219%" height="15" fill="rgb(221,136,13)"/><text x="66.0262%" y="207.50"></text></g><g><title>GloveExample`std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp; std::__1::__put_character_sequence&lt;char, std::__1::char_traits&lt;char&gt; &gt;(std::__1::basic_ostream&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="65.7981%" y="309" width="0.0219%" height="15" fill="rgb(249,199,10)"/><text x="66.0481%" y="319.50"></text></g><g><title>GloveExample`std::__1::ostreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; std::__1::__pad_and_output&lt;char, std::__1::char_traits&lt;char&gt; &gt;(std::__1::ostreambuf_iterator&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="65.7981%" y="293" width="0.0219%" height="15" fill="rgb(249,222,13)"/><text x="66.0481%" y="303.50"></text></g><g><title>libsystem_c.dylib`fwrite (1 samples, 0.02%)</title><rect x="65.7981%" y="277" width="0.0219%" height="15" fill="rgb(244,185,38)"/><text x="66.0481%" y="287.50"></text></g><g><title>libsystem_c.dylib`flockfile (1 samples, 0.02%)</title><rect x="65.7981%" y="261" width="0.0219%" height="15" fill="rgb(236,202,9)"/><text x="66.0481%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_lock_init_slow (1 samples, 0.02%)</title><rect x="65.7981%" y="245" width="0.0219%" height="15" fill="rgb(250,229,37)"/><text x="66.0481%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_check_init_slow (1 samples, 0.02%)</title><rect x="65.7981%" y="229" width="0.0219%" height="15" fill="rgb(206,174,23)"/><text x="66.0481%" y="239.50"></text></g><g><title>GloveExample`std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="65.8200%" y="309" width="0.0438%" height="15" fill="rgb(211,33,43)"/><text x="66.0700%" y="319.50"></text></g><g><title>GloveExample`std::__1::__tree_node_base&lt;void*&gt;*&amp; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt; &gt; &gt;::__find_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;(std::__1::__tree_end_node&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;*&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (2 samples, 0.04%)</title><rect x="65.8200%" y="293" width="0.0438%" height="15" fill="rgb(245,58,50)"/><text x="66.0700%" y="303.50"></text></g><g><title>GloveExample`std::__1::vector&lt;unsigned int, std::__1::allocator&lt;unsigned int&gt; &gt; puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::search&lt;std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;(std::__1::vector&lt;float, std::__1::allocator (2 samples, 0.04%)</title><rect x="65.8638%" y="309" width="0.0438%" height="15" fill="rgb(244,68,36)"/><text x="66.1138%" y="319.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::search_formatted_query (2 samples, 0.04%)</title><rect x="65.8638%" y="293" width="0.0438%" height="15" fill="rgb(232,229,15)"/><text x="66.1138%" y="303.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::search_maps (2 samples, 0.04%)</title><rect x="65.8638%" y="277" width="0.0438%" height="15" fill="rgb(254,30,23)"/><text x="66.1138%" y="287.50"></text></g><g><title>GloveExample`puffinn::Index&lt;puffinn::CosineSimilarity, puffinn::FHTCrossPolytopeHash, puffinn::SimHash&gt;::SearchBuffers::SearchBuffers(std::__1::vector&lt;puffinn::PrefixMap&lt;puffinn::FHTCrossPolytopeHash&gt;, std::__1::allocator&lt;puffinn::PrefixMap (1 samples, 0.02%)</title><rect x="65.8857%" y="261" width="0.0219%" height="15" fill="rgb(235,160,14)"/><text x="66.1357%" y="271.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="65.9514%" y="277" width="0.0219%" height="15" fill="rgb(212,155,44)"/><text x="66.2014%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="65.9514%" y="261" width="0.0219%" height="15" fill="rgb(226,2,50)"/><text x="66.2014%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.02%)</title><rect x="65.9514%" y="245" width="0.0219%" height="15" fill="rgb(234,177,6)"/><text x="66.2014%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="65.9514%" y="229" width="0.0219%" height="15" fill="rgb(217,24,9)"/><text x="66.2014%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="65.9514%" y="213" width="0.0219%" height="15" fill="rgb(220,13,46)"/><text x="66.2014%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="65.9514%" y="197" width="0.0219%" height="15" fill="rgb(239,221,27)"/><text x="66.2014%" y="207.50"></text></g><g><title>GloveExample`puffinn::UnitVectorFormat::store(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; const&amp;, short*, puffinn::DatasetDescription (3 samples, 0.07%)</title><rect x="65.9514%" y="293" width="0.0657%" height="15" fill="rgb(222,198,25)"/><text x="66.2014%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="65.9733%" y="277" width="0.0438%" height="15" fill="rgb(211,99,13)"/><text x="66.2233%" y="287.50"></text></g><g><title>GloveExample`void puffinn::Dataset&lt;puffinn::UnitVectorFormat&gt;::insert&lt;std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; &gt;(std::__1::vector&lt;float, std::__1::allocator (8 samples, 0.18%)</title><rect x="65.9076%" y="309" width="0.1752%" height="15" fill="rgb(232,111,31)"/><text x="66.1576%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.07%)</title><rect x="66.0171%" y="293" width="0.0657%" height="15" fill="rgb(245,82,37)"/><text x="66.2671%" y="303.50"></text></g><g><title>GloveExample`void std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt;::__push_back_slow_path&lt;float const&amp;&gt; (1 samples, 0.02%)</title><rect x="66.0828%" y="309" width="0.0219%" height="15" fill="rgb(227,149,46)"/><text x="66.3328%" y="319.50"></text></g><g><title>GloveExample`main (3,020 samples, 66.13%)</title><rect x="0.0000%" y="325" width="66.1266%" height="15" fill="rgb(218,36,50)"/><text x="0.2500%" y="335.50">GloveExample`main</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.02%)</title><rect x="66.1047%" y="309" width="0.0219%" height="15" fill="rgb(226,80,48)"/><text x="66.3547%" y="319.50"></text></g><g><title>libsystem_c.dylib`exit (1 samples, 0.02%)</title><rect x="66.1266%" y="325" width="0.0219%" height="15" fill="rgb(238,224,15)"/><text x="66.3766%" y="335.50"></text></g><g><title>libsystem_c.dylib`__cxa_finalize_ranges (1 samples, 0.02%)</title><rect x="66.1266%" y="309" width="0.0219%" height="15" fill="rgb(241,136,10)"/><text x="66.3766%" y="319.50"></text></g><g><title>libomp.dylib`__kmp_internal_end_library (1 samples, 0.02%)</title><rect x="66.1266%" y="293" width="0.0219%" height="15" fill="rgb(208,32,45)"/><text x="66.3766%" y="303.50"></text></g><g><title>libomp.dylib`__kmp_internal_end() (1 samples, 0.02%)</title><rect x="66.1266%" y="277" width="0.0219%" height="15" fill="rgb(207,135,9)"/><text x="66.3766%" y="287.50"></text></g><g><title>libomp.dylib`__kmp_reap_thread(kmp_info*, int) (1 samples, 0.02%)</title><rect x="66.1266%" y="261" width="0.0219%" height="15" fill="rgb(206,86,44)"/><text x="66.3766%" y="271.50"></text></g><g><title>libomp.dylib`0x101409000 (1 samples, 0.02%)</title><rect x="66.1266%" y="245" width="0.0219%" height="15" fill="rgb(245,177,15)"/><text x="66.3766%" y="255.50"></text></g><g><title>libdyld.dylib`dyld_stub_binder (1 samples, 0.02%)</title><rect x="66.1266%" y="229" width="0.0219%" height="15" fill="rgb(206,64,50)"/><text x="66.3766%" y="239.50"></text></g><g><title>dyld`dyld::fastBindLazySymbol (1 samples, 0.02%)</title><rect x="66.1266%" y="213" width="0.0219%" height="15" fill="rgb(234,36,40)"/><text x="66.3766%" y="223.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::doBindFastLazySymbol(unsigned int, ImageLoader::LinkContext const&amp;, void (*)(), void (*) (1 samples, 0.02%)</title><rect x="66.1266%" y="197" width="0.0219%" height="15" fill="rgb(213,64,8)"/><text x="66.3766%" y="207.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolve (1 samples, 0.02%)</title><rect x="66.1266%" y="181" width="0.0219%" height="15" fill="rgb(210,75,36)"/><text x="66.3766%" y="191.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolveTwolevel (1 samples, 0.02%)</title><rect x="66.1266%" y="165" width="0.0219%" height="15" fill="rgb(229,88,21)"/><text x="66.3766%" y="175.50"></text></g><g><title>dyld`ImageLoader::findExportedSymbolAddress (1 samples, 0.02%)</title><rect x="66.1266%" y="149" width="0.0219%" height="15" fill="rgb(252,204,47)"/><text x="66.3766%" y="159.50"></text></g><g><title>dyld`ImageLoaderMachO::findExportedSymbol (1 samples, 0.02%)</title><rect x="66.1266%" y="133" width="0.0219%" height="15" fill="rgb(208,77,27)"/><text x="66.3766%" y="143.50"></text></g><g><title>dyld`ImageLoaderMachO::findExportedSymbol (1 samples, 0.02%)</title><rect x="66.1266%" y="117" width="0.0219%" height="15" fill="rgb(221,76,26)"/><text x="66.3766%" y="127.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::findShallowExportedSymbol (1 samples, 0.02%)</title><rect x="66.1266%" y="101" width="0.0219%" height="15" fill="rgb(225,139,18)"/><text x="66.3766%" y="111.50"></text></g><g><title>GloveExample`0x5 (3,025 samples, 66.24%)</title><rect x="0.0000%" y="357" width="66.2360%" height="15" fill="rgb(230,137,11)"/><text x="0.2500%" y="367.50">GloveExample`0x5</text></g><g><title>libdyld.dylib`start (3,025 samples, 66.24%)</title><rect x="0.0000%" y="341" width="66.2360%" height="15" fill="rgb(212,28,1)"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.09%)</title><rect x="66.1485%" y="325" width="0.0876%" height="15" fill="rgb(248,164,17)"/><text x="66.3985%" y="335.50"></text></g><g><title>libomp.dylib`0x101409000 (2 samples, 0.04%)</title><rect x="66.2579%" y="245" width="0.0438%" height="15" fill="rgb(222,171,42)"/><text x="66.5079%" y="255.50"></text></g><g><title>libdyld.dylib`dyld_stub_binder (2 samples, 0.04%)</title><rect x="66.2579%" y="229" width="0.0438%" height="15" fill="rgb(243,84,45)"/><text x="66.5079%" y="239.50"></text></g><g><title>dyld`dyld::fastBindLazySymbol (2 samples, 0.04%)</title><rect x="66.2579%" y="213" width="0.0438%" height="15" fill="rgb(252,49,23)"/><text x="66.5079%" y="223.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::doBindFastLazySymbol(unsigned int, ImageLoader::LinkContext const&amp;, void (*)(), void (*) (2 samples, 0.04%)</title><rect x="66.2579%" y="197" width="0.0438%" height="15" fill="rgb(215,19,7)"/><text x="66.5079%" y="207.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolve (2 samples, 0.04%)</title><rect x="66.2579%" y="181" width="0.0438%" height="15" fill="rgb(238,81,41)"/><text x="66.5079%" y="191.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolveTwolevel (2 samples, 0.04%)</title><rect x="66.2579%" y="165" width="0.0438%" height="15" fill="rgb(210,199,37)"/><text x="66.5079%" y="175.50"></text></g><g><title>dyld`ImageLoader::findExportedSymbolAddress (2 samples, 0.04%)</title><rect x="66.2579%" y="149" width="0.0438%" height="15" fill="rgb(244,192,49)"/><text x="66.5079%" y="159.50"></text></g><g><title>dyld`ImageLoaderMachO::findExportedSymbol (2 samples, 0.04%)</title><rect x="66.2579%" y="133" width="0.0438%" height="15" fill="rgb(226,211,11)"/><text x="66.5079%" y="143.50"></text></g><g><title>dyld`ImageLoaderMachO::findExportedSymbol (2 samples, 0.04%)</title><rect x="66.2579%" y="117" width="0.0438%" height="15" fill="rgb(236,162,54)"/><text x="66.5079%" y="127.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::findShallowExportedSymbol (2 samples, 0.04%)</title><rect x="66.2579%" y="101" width="0.0438%" height="15" fill="rgb(220,229,9)"/><text x="66.5079%" y="111.50"></text></g><g><title>dyld`ImageLoader::trieWalk (2 samples, 0.04%)</title><rect x="66.2579%" y="85" width="0.0438%" height="15" fill="rgb(250,87,22)"/><text x="66.5079%" y="95.50"></text></g><g><title>libomp.dylib`__kmp_hardware_timestamp (97 samples, 2.12%)</title><rect x="66.3017%" y="245" width="2.1239%" height="15" fill="rgb(239,43,17)"/><text x="66.5517%" y="255.50">l..</text></g><g><title>libomp.dylib`__kmp_yield (1 samples, 0.02%)</title><rect x="68.4257%" y="245" width="0.0219%" height="15" fill="rgb(231,177,25)"/><text x="68.6757%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (20 samples, 0.44%)</title><rect x="89.0519%" y="229" width="0.4379%" height="15" fill="rgb(219,179,1)"/><text x="89.3019%" y="239.50"></text></g><g><title>libomp.dylib`kmp_flag_64::wait (962 samples, 21.06%)</title><rect x="68.4476%" y="245" width="21.0642%" height="15" fill="rgb(238,219,53)"/><text x="68.6976%" y="255.50">libomp.dylib`kmp_flag_64::wait</text></g><g><title>libsystem_pthread.dylib`sched_yield (1 samples, 0.02%)</title><rect x="89.4898%" y="229" width="0.0219%" height="15" fill="rgb(232,167,36)"/><text x="89.7398%" y="239.50"></text></g><g><title>libomp.dylib`__kmp_fork_barrier(int, int) (1,064 samples, 23.30%)</title><rect x="66.2360%" y="277" width="23.2976%" height="15" fill="rgb(244,19,51)"/><text x="66.4860%" y="287.50">libomp.dylib`__kmp_fork_barrier(int, ..</text></g><g><title>libomp.dylib`__kmp_hyper_barrier_release(barrier_type, kmp_info*, int, int, int, void*) (1,063 samples, 23.28%)</title><rect x="66.2579%" y="261" width="23.2757%" height="15" fill="rgb(224,6,22)"/><text x="66.5079%" y="271.50">libomp.dylib`__kmp_hyper_barrier_rele..</text></g><g><title>libsystem_pthread.dylib`sched_yield (1 samples, 0.02%)</title><rect x="89.5117%" y="245" width="0.0219%" height="15" fill="rgb(224,145,5)"/><text x="89.7617%" y="255.50"></text></g><g><title>GloveExample`puffinn::FHTCrossPolytopeHashFunction::operator() (1 samples, 0.02%)</title><rect x="89.8621%" y="229" width="0.0219%" height="15" fill="rgb(234,130,49)"/><text x="90.1121%" y="239.50"></text></g><g><title>GloveExample`fht_float (158 samples, 3.46%)</title><rect x="96.3433%" y="197" width="3.4596%" height="15" fill="rgb(254,6,2)"/><text x="96.5933%" y="207.50">Glo..</text></g><g><title>GloveExample`puffinn::IndependentHasher&lt;puffinn::FHTCrossPolytopeHash&gt;::operator() (456 samples, 9.98%)</title><rect x="89.8840%" y="229" width="9.9847%" height="15" fill="rgb(208,96,46)"/><text x="90.1340%" y="239.50">GloveExample`p..</text></g><g><title>GloveExample`puffinn::FHTCrossPolytopeHashFunction::operator() (451 samples, 9.88%)</title><rect x="89.9934%" y="213" width="9.8752%" height="15" fill="rgb(239,3,39)"/><text x="90.2434%" y="223.50">GloveExample`p..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.07%)</title><rect x="99.8029%" y="197" width="0.0657%" height="15" fill="rgb(233,210,1)"/><text x="100.0529%" y="207.50"></text></g><g><title>GloveExample`.omp_outlined. (473 samples, 10.36%)</title><rect x="89.5336%" y="245" width="10.3569%" height="15" fill="rgb(244,137,37)"/><text x="89.7836%" y="255.50">GloveExample`.o..</text></g><g><title>libomp.dylib`__kmpc_for_static_init_4u (1 samples, 0.02%)</title><rect x="99.8686%" y="229" width="0.0219%" height="15" fill="rgb(240,136,2)"/><text x="100.1186%" y="239.50"></text></g><g><title>libomp.dylib`__kmp_invoke_task_func (474 samples, 10.38%)</title><rect x="89.5336%" y="277" width="10.3788%" height="15" fill="rgb(239,18,37)"/><text x="89.7836%" y="287.50">libomp.dylib`__..</text></g><g><title>libomp.dylib`__kmp_invoke_microtask (474 samples, 10.38%)</title><rect x="89.5336%" y="261" width="10.3788%" height="15" fill="rgb(218,185,22)"/><text x="89.7836%" y="271.50">libomp.dylib`__..</text></g><g><title>libomp.dylib`__kmpc_for_static_fini (1 samples, 0.02%)</title><rect x="99.8905%" y="245" width="0.0219%" height="15" fill="rgb(225,218,4)"/><text x="100.1405%" y="255.50"></text></g><g><title>libomp.dylib`__kmp_launch_worker(void*) (1,541 samples, 33.74%)</title><rect x="66.2360%" y="309" width="33.7421%" height="15" fill="rgb(230,182,32)"/><text x="66.4860%" y="319.50">libomp.dylib`__kmp_launch_worker(void*)</text></g><g><title>libomp.dylib`__kmp_launch_thread (1,541 samples, 33.74%)</title><rect x="66.2360%" y="293" width="33.7421%" height="15" fill="rgb(242,56,43)"/><text x="66.4860%" y="303.50">libomp.dylib`__kmp_launch_thread</text></g><g><title>libomp.dylib`__kmp_join_barrier(int) (3 samples, 0.07%)</title><rect x="99.9124%" y="277" width="0.0657%" height="15" fill="rgb(233,99,24)"/><text x="100.1624%" y="287.50"></text></g><g><title>libomp.dylib`__kmp_hyper_barrier_gather(barrier_type, kmp_info*, int, int, void (*)(void*, void*), void*) (1 samples, 0.02%)</title><rect x="99.9562%" y="261" width="0.0219%" height="15" fill="rgb(234,209,42)"/><text x="100.2062%" y="271.50"></text></g><g><title>libomp.dylib`kmp_flag_64::release (1 samples, 0.02%)</title><rect x="99.9562%" y="245" width="0.0219%" height="15" fill="rgb(227,7,12)"/><text x="100.2062%" y="255.50"></text></g><g><title>all (4,567 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(245,203,43)"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1,542 samples, 33.76%)</title><rect x="66.2360%" y="357" width="33.7640%" height="15" fill="rgb(238,205,33)"/><text x="66.4860%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (1,542 samples, 33.76%)</title><rect x="66.2360%" y="341" width="33.7640%" height="15" fill="rgb(231,56,7)"/><text x="66.4860%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_body (1,542 samples, 33.76%)</title><rect x="66.2360%" y="325" width="33.7640%" height="15" fill="rgb(244,186,29)"/><text x="66.4860%" y="335.50">libsystem_pthread.dylib`_pthread_body</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (1 samples, 0.02%)</title><rect x="99.9781%" y="309" width="0.0219%" height="15" fill="rgb(234,111,31)"/><text x="100.2281%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (1 samples, 0.02%)</title><rect x="99.9781%" y="293" width="0.0219%" height="15" fill="rgb(241,149,10)"/><text x="100.2281%" y="303.50"></text></g></svg></svg>